{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { useConfig, useNetwork } from '../../..';\nimport { useReadonlyNetworks } from '../../network';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory } from '../common';\nimport { getUniqueActiveCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\n\nfunction composeChainState(networks, state, multicallAddresses) {\n  return fromEntries(Object.keys(networks).map(chainId => [Number(chainId), {\n    value: state[Number(chainId)],\n    multicallAddress: multicallAddresses[Number(chainId)]\n  }]));\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function MultiChainStateProvider(_ref) {\n  let {\n    children,\n    multicallAddresses\n  } = _ref;\n  const {\n    multicallVersion,\n    fastMulticallEncoding\n  } = useConfig();\n  const networks = useReadonlyNetworks();\n  const blockNumbers = useBlockNumbers();\n  const {\n    reportError\n  } = useNetwork();\n  const [calls, dispatchCalls] = useReducer(callsReducer, []);\n  const [state, dispatchState] = useReducer(chainStateReducer, {});\n  const multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding !== null && fastMulticallEncoding !== void 0 ? fastMulticallEncoding : false);\n  const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50);\n  const uniqueCalls = useMemo(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls]); // used for deep equality in hook dependencies\n\n  const uniqueCallsJSON = JSON.stringify(debouncedCalls);\n  const chainId = useChainId();\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n\n  function multicallForChain(chainId, provider) {\n    const blockNumber = blockNumbers[chainId];\n    const multicallAddress = multicallAddresses[chainId];\n\n    if (!provider || !blockNumber) {\n      return;\n    }\n\n    if (!multicallAddress) {\n      reportError(new Error(`Missing multicall address for chain id ${chainId}`));\n      return;\n    }\n\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return;\n    }\n\n    const callsOnThisChain = uniqueCalls.filter(call => call.chainId === chainId);\n\n    if (callsOnThisChain.length === 0) {\n      return;\n    }\n\n    performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, reportError);\n    dispatchCalls({\n      type: 'UPDATE_CALLS',\n      calls\n    });\n  }\n\n  useEffect(() => {\n    for (const [_chainId, provider] of Object.entries(networks)) {\n      multicallForChain(Number(_chainId), provider);\n    }\n  }, [blockNumbers, networks, multicallAddresses, uniqueCallsJSON]);\n  const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [state, multicallAddresses, networks]);\n  const provided = {\n    chains,\n    dispatchCalls\n  };\n  return _jsx(MultiChainStatesContext.Provider, {\n    value: provided,\n    children: children\n  });\n}","map":{"version":3,"mappings":"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","names":["useEffect","useMemo","useReducer","useDebouncePair","useBlockNumbers","MultiChainStatesContext","useConfig","useNetwork","useReadonlyNetworks","fromEntries","performMulticall","callsReducer","chainStateReducer","multicall1Factory","multicall2Factory","getUniqueActiveCalls","useDevtoolsReporting","useChainId","composeChainState","networks","state","multicallAddresses","Object","keys","map","chainId","Number","value","multicallAddress","MultiChainStateProvider","children","multicallVersion","fastMulticallEncoding","blockNumbers","reportError","calls","dispatchCalls","dispatchState","multicall","debouncedCalls","debouncedNetworks","uniqueCalls","uniqueCallsJSON","JSON","stringify","undefined","multicallForChain","provider","blockNumber","Error","callsOnThisChain","filter","call","length","type","_chainId","entries","chains","provided","_jsx","Provider"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\multiChainStates\\provider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useMemo, useReducer } from 'react'\nimport { useDebouncePair, useBlockNumbers } from '../../../hooks'\nimport { MultiChainStatesContext } from './context'\nimport { ChainId, State, useConfig, useNetwork } from '../../..'\nimport { useReadonlyNetworks } from '../../network'\nimport { fromEntries } from '../../../helpers/fromEntries'\nimport { performMulticall } from '../common/performMulticall'\nimport { Providers } from '../../network/readonlyNetworks/model'\nimport { BaseProvider } from '@ethersproject/providers'\nimport { callsReducer, chainStateReducer, multicall1Factory, multicall2Factory } from '../common'\nimport { getUniqueActiveCalls } from '../../../helpers'\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting'\nimport { useChainId } from '../../../hooks/useChainId'\n\ninterface Props {\n  children: ReactNode\n  multicallAddresses: {\n    [chainId: number]: string\n  }\n}\n\nfunction composeChainState(networks: Providers, state: State, multicallAddresses: Props['multicallAddresses']) {\n  return fromEntries(\n    Object.keys(networks).map((chainId) => [\n      Number(chainId),\n      {\n        value: state[Number(chainId)],\n        multicallAddress: multicallAddresses[Number(chainId)],\n      },\n    ])\n  )\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function MultiChainStateProvider({ children, multicallAddresses }: Props) {\n  const { multicallVersion, fastMulticallEncoding } = useConfig()\n  const networks = useReadonlyNetworks()\n  const blockNumbers = useBlockNumbers()\n  const { reportError } = useNetwork()\n\n  const [calls, dispatchCalls] = useReducer(callsReducer, [])\n  const [state, dispatchState] = useReducer(chainStateReducer, {})\n\n  const multicall = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding ?? false)\n\n  const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50)\n  const uniqueCalls = useMemo(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls])\n\n  // used for deep equality in hook dependencies\n  const uniqueCallsJSON = JSON.stringify(debouncedCalls)\n\n  const chainId = useChainId()\n  useDevtoolsReporting(\n    uniqueCallsJSON,\n    uniqueCalls,\n    chainId !== undefined ? blockNumbers[chainId as ChainId] : undefined,\n    multicallAddresses\n  )\n\n  function multicallForChain(chainId: ChainId, provider?: BaseProvider) {\n    const blockNumber = blockNumbers[chainId]\n    const multicallAddress = multicallAddresses[chainId]\n\n    if (!provider || !blockNumber) {\n      return\n    }\n    if (!multicallAddress) {\n      reportError(new Error(`Missing multicall address for chain id ${chainId}`))\n      return\n    }\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return\n    }\n\n    const callsOnThisChain = uniqueCalls.filter((call) => call.chainId === chainId)\n    if (callsOnThisChain.length === 0) {\n      return\n    }\n    performMulticall(\n      provider,\n      multicall,\n      multicallAddress,\n      blockNumber,\n      callsOnThisChain,\n      dispatchState,\n      chainId,\n      reportError\n    )\n    dispatchCalls({ type: 'UPDATE_CALLS', calls })\n  }\n\n  useEffect(() => {\n    for (const [_chainId, provider] of Object.entries(networks)) {\n      multicallForChain(Number(_chainId), provider)\n    }\n  }, [blockNumbers, networks, multicallAddresses, uniqueCallsJSON])\n\n  const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [\n    state,\n    multicallAddresses,\n    networks,\n  ])\n\n  const provided = { chains, dispatchCalls }\n\n  return <MultiChainStatesContext.Provider value={provided} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}