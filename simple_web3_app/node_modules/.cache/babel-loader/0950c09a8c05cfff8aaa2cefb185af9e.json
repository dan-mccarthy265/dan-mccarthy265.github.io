{"ast":null,"code":"import _defineProperty from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _a, _b, _c;\n\n  var current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      var newState = action.state;\n\n      if (action.blockNumber === current) {\n        // merge with existing state to prevent requests coming out of order\n        // from overwriting the data\n        var oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n\n        for (var _i = 0, _Object$entries = Object.entries(oldState); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              address = _Object$entries$_i[0],\n              entries = _Object$entries$_i[1];\n\n          newState = Object.assign(Object.assign({}, newState), _defineProperty({}, address, Object.assign(Object.assign({}, entries), newState[address])));\n        }\n      }\n\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, {\n        blockNumber: action.blockNumber,\n        state: newState\n      }));\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, Object.assign(Object.assign({}, state[action.chainId]), {\n        blockNumber: action.blockNumber,\n        error: action.error\n      })));\n    }\n  }\n\n  return state;\n}","map":{"version":3,"mappings":";;;AAkCA;;;AAGA,OAAM,SAAUA,iBAAV,GAAuE;EAAA,IAA3CC,KAA2C,uEAA5B,EAA4B;EAAA,IAAxBC,MAAwB;;;;EAC3E,IAAMC,OAAO,GAAG,WAAK,CAACD,MAAM,CAACE,OAAR,CAAL,MAAqB,IAArB,IAAqBC,aAArB,GAAqB,MAArB,GAAqBA,GAAEC,WAAvC;;EACA,IAAI,CAACH,OAAD,IAAYD,MAAM,CAACI,WAAP,IAAsBH,OAAtC,EAA+C;IAC7C,IAAID,MAAM,CAACK,IAAP,KAAgB,eAApB,EAAqC;MACnC,IAAIC,QAAQ,GAAGN,MAAM,CAACD,KAAtB;;MACA,IAAIC,MAAM,CAACI,WAAP,KAAuBH,OAA3B,EAAoC;QAClC;QACA;QACA,IAAMM,QAAQ,GAAG,iBAAK,CAACP,MAAM,CAACE,OAAR,CAAL,MAAqB,IAArB,IAAqBM,aAArB,GAAqB,MAArB,GAAqBA,GAAET,KAAvB,MAA4B,IAA5B,IAA4BU,aAA5B,GAA4BA,EAA5B,GAAgC,EAAjD;;QACA,mCAAiCC,MAAM,CAACC,OAAP,CAAeJ,QAAf,CAAjC,qCAA2D;UAAtD;UAAA,IAAOK,OAAP;UAAA,IAAgBD,OAAhB;;UACHL,QAAQ,mCACHA,QADG,uBAELM,OAFK,EAEGF,gCACJC,OADI,GAEJL,QAAQ,CAACM,OAAD,CAFJ,CAFH,EAAR;QAOD;MACF;;MACD,uCACKb,KADL,uBAEGC,MAAM,CAACE,OAFV,EAEoB;QAAEE,WAAW,EAAEJ,MAAM,CAACI,WAAtB;QAAmCL,KAAK,EAAEO;MAA1C,CAFpB;IAID,CApBD,MAoBO,IAAIN,MAAM,CAACK,IAAP,KAAgB,aAApB,EAAmC;MACxC,uCACKN,KADL,uBAEGC,MAAM,CAACE,OAFV,EAEkBQ,gCAAOX,KAAK,CAACC,MAAM,CAACE,OAAR,CAAZ,GAA4B;QAAEE,WAAW,EAAEJ,MAAM,CAACI,WAAtB;QAAmCS,KAAK,EAAEb,MAAM,CAACa;MAAjD,CAA5B,CAFlB;IAID;EACF;;EACD,OAAOd,KAAP;AACD","names":["chainStateReducer","state","action","current","chainId","_a","blockNumber","type","newState","oldState","_b","_c","Object","entries","address","error"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\chainStateReducer.ts"],"sourcesContent":["import { ChainState } from './model'\n\n/**\n * @public\n */\nexport interface State {\n  [chainId: number]:\n    | {\n        blockNumber: number\n        state?: ChainState\n        error?: unknown\n      }\n    | undefined\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport type ChainStateAction = FetchSuccess | FetchError\n\ninterface FetchSuccess {\n  type: 'FETCH_SUCCESS'\n  chainId: number\n  blockNumber: number\n  state: ChainState\n}\n\ninterface FetchError {\n  type: 'FETCH_ERROR'\n  chainId: number\n  blockNumber: number\n  error: unknown\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state: State = {}, action: ChainStateAction) {\n  const current = state[action.chainId]?.blockNumber\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state\n      if (action.blockNumber === current) {\n        // merge with existing state to prevent requests coming out of order\n        // from overwriting the data\n        const oldState = state[action.chainId]?.state ?? {}\n        for (const [address, entries] of Object.entries(oldState)) {\n          newState = {\n            ...newState,\n            [address]: {\n              ...entries,\n              ...newState[address],\n            },\n          }\n        }\n      }\n      return {\n        ...state,\n        [action.chainId]: { blockNumber: action.blockNumber, state: newState },\n      }\n    } else if (action.type === 'FETCH_ERROR') {\n      return {\n        ...state,\n        [action.chainId]: { ...state[action.chainId], blockNumber: action.blockNumber, error: action.error },\n      }\n    }\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}