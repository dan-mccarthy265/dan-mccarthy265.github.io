{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networksReducer } from './reducer';\nimport { Web3Provider, Provider } from '@ethersproject/providers';\nimport { subscribeToProviderEvents, getInjectedProvider } from '../../../helpers';\nimport { useLocalStorage, useConfig } from '../../../hooks';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nasync function tryToGetAccount(provider) {\n  try {\n    return await provider.getSigner().getAddress();\n  } catch (err) {\n    if (err.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined;\n    }\n\n    throw err;\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function NetworkProvider(_ref) {\n  let {\n    children,\n    providerOverride\n  } = _ref;\n  const {\n    autoConnect,\n    pollingInterval\n  } = useConfig();\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState);\n  const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n  const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const [isLoading, setLoading] = useState(false);\n  const activateBrowserWallet = useCallback(async () => {\n    setLoading(true);\n    const injectedProvider = await getInjectedProvider(pollingInterval);\n\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'));\n      setLoading(false);\n      throw new Error('No injected provider available');\n    }\n\n    try {\n      await injectedProvider.send('eth_requestAccounts', []);\n      setShouldConnectMetamask(true);\n    } catch (err) {\n      reportError(err);\n      setShouldConnectMetamask(false);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n\n    return activate(injectedProvider);\n  }, []);\n  useEffect(() => {\n    if (providerOverride) {\n      void activate(providerOverride);\n    }\n  }, [providerOverride]);\n  const update = useCallback(newNetwork => {\n    dispatch({\n      type: 'UPDATE_NETWORK',\n      network: newNetwork\n    });\n  }, [network]);\n  const reportError = useCallback(error => {\n    console.error(error);\n    dispatch({\n      type: 'ADD_ERROR',\n      error\n    });\n  }, []);\n  const deactivate = useCallback(() => {\n    setShouldConnectMetamask(false);\n    update({\n      accounts: []\n    });\n  }, []);\n  const onDisconnect = useCallback(error => {\n    deactivate();\n    reportError(error);\n  }, []);\n  useEffect(() => {\n    setTimeout(async () => {\n      var _a, _b, _c;\n\n      try {\n        if (shouldConnectMetamask && autoConnect && !providerOverride) {\n          await detectEthereumProvider(); // If window.ethereum._state.accounts is non null but has no items,\n          // it probably means that the user has disconnected Metamask manually.\n\n          if (shouldConnectMetamask && ((_c = (_b = (_a = window.ethereum) === null || _a === void 0 ? void 0 : _a._state) === null || _b === void 0 ? void 0 : _b.accounts) === null || _c === void 0 ? void 0 : _c.length) === 0) {\n            return;\n          }\n\n          await activateBrowserWallet();\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n    });\n  }, [shouldConnectMetamask, autoConnect, providerOverride]);\n  const activate = useCallback(async provider => {\n    var _a;\n\n    const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);\n\n    try {\n      setLoading(true);\n      const account = await tryToGetAccount(wrappedProvider);\n      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;\n      onUnsubscribe();\n      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect);\n      setOnUnsubscribe(() => clearSubscriptions);\n      update({\n        provider: wrappedProvider,\n        chainId,\n        accounts: account ? [account] : []\n      });\n    } catch (err) {\n      reportError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [onUnsubscribe]);\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      network,\n      update,\n      activate,\n      deactivate,\n      reportError,\n      activateBrowserWallet,\n      isLoading\n    },\n    children: children\n  });\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useReducer","useState","NetworkContext","defaultNetworkState","networksReducer","Web3Provider","Provider","subscribeToProviderEvents","getInjectedProvider","useLocalStorage","useConfig","detectEthereumProvider","tryToGetAccount","provider","getSigner","getAddress","err","code","undefined","NetworkProvider","children","providerOverride","autoConnect","pollingInterval","network","dispatch","onUnsubscribe","setOnUnsubscribe","shouldConnectMetamask","setShouldConnectMetamask","isLoading","setLoading","activateBrowserWallet","injectedProvider","reportError","Error","send","activate","update","newNetwork","type","error","console","deactivate","accounts","onDisconnect","setTimeout","window","ethereum","_a","_state","_b","_c","length","warn","wrappedProvider","isProvider","account","chainId","getNetwork","clearSubscriptions","_jsx","value"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\network\\network\\provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer, useState } from 'react'\nimport { NetworkContext } from './context'\nimport { defaultNetworkState, networksReducer } from './reducer'\nimport { Network } from './model'\nimport { JsonRpcProvider, Web3Provider, ExternalProvider, Provider } from '@ethersproject/providers'\nimport { subscribeToProviderEvents, getInjectedProvider } from '../../../helpers'\nimport { useLocalStorage, useConfig } from '../../../hooks'\nimport detectEthereumProvider from '@metamask/detect-provider'\n\ninterface NetworkProviderProps {\n  children: ReactNode\n  providerOverride?: JsonRpcProvider\n}\n\nasync function tryToGetAccount(provider: JsonRpcProvider) {\n  try {\n    return await provider.getSigner().getAddress()\n  } catch (err: any) {\n    if (err.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined\n    }\n    throw err\n  }\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function NetworkProvider({ children, providerOverride }: NetworkProviderProps) {\n  const { autoConnect, pollingInterval } = useConfig()\n\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState)\n  const [onUnsubscribe, setOnUnsubscribe] = useState<() => void>(() => () => undefined)\n  const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask')\n  const [isLoading, setLoading] = useState(false)\n\n  const activateBrowserWallet = useCallback(async () => {\n    setLoading(true)\n    const injectedProvider = await getInjectedProvider(pollingInterval)\n\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'))\n      setLoading(false)\n      throw new Error('No injected provider available')\n    }\n    try {\n      await injectedProvider.send('eth_requestAccounts', [])\n      setShouldConnectMetamask(true)\n    } catch (err: any) {\n      reportError(err)\n      setShouldConnectMetamask(false)\n      throw err\n    } finally {\n      setLoading(false)\n    }\n    return activate(injectedProvider)\n  }, [])\n\n  useEffect(() => {\n    if (providerOverride) {\n      void activate(providerOverride)\n    }\n  }, [providerOverride])\n  const update = useCallback(\n    (newNetwork: Partial<Network>) => {\n      dispatch({ type: 'UPDATE_NETWORK', network: newNetwork })\n    },\n    [network]\n  )\n\n  const reportError = useCallback((error: Error) => {\n    console.error(error)\n    dispatch({ type: 'ADD_ERROR', error })\n  }, [])\n\n  const deactivate = useCallback(() => {\n    setShouldConnectMetamask(false)\n    update({\n      accounts: [],\n    })\n  }, [])\n\n  const onDisconnect = useCallback((error) => {\n    deactivate()\n    reportError(error)\n  }, [])\n\n  useEffect(() => {\n    setTimeout(async () => {\n      try {\n        if (shouldConnectMetamask && autoConnect && !providerOverride) {\n          await detectEthereumProvider()\n\n          // If window.ethereum._state.accounts is non null but has no items,\n          // it probably means that the user has disconnected Metamask manually.\n          if (shouldConnectMetamask && (window.ethereum as any)?._state?.accounts?.length === 0) {\n            return\n          }\n\n          await activateBrowserWallet()\n        }\n      } catch (err) {\n        console.warn(err)\n      }\n    })\n  }, [shouldConnectMetamask, autoConnect, providerOverride])\n\n  const activate = useCallback(\n    async (provider: JsonRpcProvider | ExternalProvider) => {\n      const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider)\n      try {\n        setLoading(true)\n        const account = await tryToGetAccount(wrappedProvider)\n        const chainId = (await wrappedProvider.getNetwork())?.chainId\n        onUnsubscribe()\n        const clearSubscriptions = subscribeToProviderEvents((wrappedProvider as any).provider, update, onDisconnect)\n        setOnUnsubscribe(() => clearSubscriptions)\n        update({\n          provider: wrappedProvider,\n          chainId,\n          accounts: account ? [account] : [],\n        })\n      } catch (err: any) {\n        reportError(err)\n        throw err\n      } finally {\n        setLoading(false)\n      }\n    },\n    [onUnsubscribe]\n  )\n  return (\n    <NetworkContext.Provider\n      value={{ network, update, activate, deactivate, reportError, activateBrowserWallet, isLoading }}\n      children={children}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}