{"ast":null,"code":"import { useConfig } from '../../src';\nimport { useCallback, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { estimateGasLimit, usePromiseTransaction } from './usePromiseTransaction';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function connectContractToSigner(contract, options, library) {\n  if (contract.signer) {\n    return contract;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.signer) {\n    return contract.connect(options.signer);\n  }\n\n  if (library === null || library === void 0 ? void 0 : library.getSigner()) {\n    return contract.connect(library.getSigner());\n  }\n\n  throw new TypeError('No signer available in contract, options or library');\n}\n/**\n * Hook returns an object with four variables: ``state`` , ``send``, ``events`` , and ``resetState``.\n *\n * The `state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * The `events` is a array of parsed transaction events of type [LogDescription](https://docs.ethers.io/v5/api/utils/abi/interface/#LogDescription).\n *\n * To send a transaction use `send` function returned by `useContractFunction`.\n * The function forwards arguments to ethers.js contract object, so that arguments map 1 to 1 with Solidity function arguments.\n * Additionally, there can be one extra argument - [TransactionOverrides](https://docs.ethers.io/v5/api/contract/contract/#contract-functionsSend), which can be used to manipulate transaction parameters like gasPrice, nonce, etc\n *\n * If typechain contract is supplied as contract parameter then function name and send arguments will be type checked.\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n * @public\n * @param contract contract which function is to be called , also see [Contract](https://docs.ethers.io/v5/api/contract/contract/)\n * @param functionName name of function to call\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with variables: `send` , `state` , `events`: `{ send: (...args: any[]) => void, state: TransactionStatus, events: LogDescription[] }`.\n *\n * @example\n * const { state, send } = useContractFunction(contract, 'deposit', { transactionName: 'Wrap' })\n *\n * const depositEther = (etherAmount: string) => {\n *   send({ value: utils.parseEther(etherAmount) })\n * }\n * @example\n * const { state, send } = useContractFunction(contract, 'withdraw', { transactionName: 'Unwrap' })\n *\n * const withdrawEther = (wethAmount: string) => {\n *   send(utils.parseEther(wethAmount))\n * }\n */\n\nexport function useContractFunction(contract, functionName, options) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(chainId, options);\n  const [events, setEvents] = useState(undefined);\n  const {\n    bufferGasLimitPercentage = 0\n  } = useConfig();\n  const send = useCallback(async function () {\n    var _a, _b;\n\n    if (contract) {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const hasOpts = args.length > ((_b = (_a = contract.interface) === null || _a === void 0 ? void 0 : _a.getFunction(functionName).inputs.length) !== null && _b !== void 0 ? _b : 0);\n      const contractWithSigner = connectContractToSigner(contract, options, library);\n      const opts = hasOpts ? args[args.length - 1] : undefined;\n      const gasLimit = await estimateGasLimit(opts, library === null || library === void 0 ? void 0 : library.getSigner(), bufferGasLimitPercentage);\n      const modifiedOpts = Object.assign(Object.assign({}, opts), {\n        gasLimit\n      });\n      const modifiedArgs = hasOpts ? args.slice(0, args.length - 1) : args;\n      modifiedArgs.push(modifiedOpts);\n      const receipt = await promiseTransaction(contractWithSigner[functionName](...modifiedArgs));\n\n      if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {\n        const events = receipt.logs.reduce((accumulatedLogs, log) => {\n          try {\n            return log.address.toLowerCase() === contract.address.toLowerCase() ? [...accumulatedLogs, contract.interface.parseLog(log)] : accumulatedLogs;\n          } catch (_err) {\n            return accumulatedLogs;\n          }\n        }, []);\n        setEvents(events);\n      }\n    }\n  }, [contract, functionName, options, library]);\n  return {\n    send,\n    state,\n    events,\n    resetState\n  };\n}","map":{"version":3,"mappings":"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","names":["useConfig","useCallback","useState","useEthers","estimateGasLimit","usePromiseTransaction","connectContractToSigner","contract","options","library","signer","connect","getSigner","TypeError","useContractFunction","functionName","chainId","promiseTransaction","state","resetState","events","setEvents","undefined","bufferGasLimitPercentage","send","args","hasOpts","length","interface","_a","getFunction","inputs","_b","contractWithSigner","opts","gasLimit","modifiedOpts","modifiedArgs","slice","push","receipt","logs","reduce","accumulatedLogs","log","address","toLowerCase","parseLog","_err"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useContractFunction.ts"],"sourcesContent":["import { TransactionOptions, useConfig } from '../../src'\nimport { Contract } from '@ethersproject/contracts'\nimport { JsonRpcProvider } from '@ethersproject/providers'\nimport { useCallback, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { estimateGasLimit, usePromiseTransaction } from './usePromiseTransaction'\nimport { LogDescription } from 'ethers/lib/utils'\nimport { ContractFunctionNames, Falsy, Params, TypedContract } from '../model/types'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function connectContractToSigner(contract: Contract, options?: TransactionOptions, library?: JsonRpcProvider) {\n  if (contract.signer) {\n    return contract\n  }\n\n  if (options?.signer) {\n    return contract.connect(options.signer)\n  }\n\n  if (library?.getSigner()) {\n    return contract.connect(library.getSigner())\n  }\n\n  throw new TypeError('No signer available in contract, options or library')\n}\n\n/**\n * Hook returns an object with four variables: ``state`` , ``send``, ``events`` , and ``resetState``.\n *\n * The `state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * The `events` is a array of parsed transaction events of type [LogDescription](https://docs.ethers.io/v5/api/utils/abi/interface/#LogDescription).\n *\n * To send a transaction use `send` function returned by `useContractFunction`.\n * The function forwards arguments to ethers.js contract object, so that arguments map 1 to 1 with Solidity function arguments.\n * Additionally, there can be one extra argument - [TransactionOverrides](https://docs.ethers.io/v5/api/contract/contract/#contract-functionsSend), which can be used to manipulate transaction parameters like gasPrice, nonce, etc\n *\n * If typechain contract is supplied as contract parameter then function name and send arguments will be type checked.\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n * @public\n * @param contract contract which function is to be called , also see [Contract](https://docs.ethers.io/v5/api/contract/contract/)\n * @param functionName name of function to call\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with variables: `send` , `state` , `events`: `{ send: (...args: any[]) => void, state: TransactionStatus, events: LogDescription[] }`.\n *\n * @example\n * const { state, send } = useContractFunction(contract, 'deposit', { transactionName: 'Wrap' })\n *\n * const depositEther = (etherAmount: string) => {\n *   send({ value: utils.parseEther(etherAmount) })\n * }\n * @example\n * const { state, send } = useContractFunction(contract, 'withdraw', { transactionName: 'Unwrap' })\n *\n * const withdrawEther = (wethAmount: string) => {\n *   send(utils.parseEther(wethAmount))\n * }\n */\nexport function useContractFunction<T extends TypedContract, FN extends ContractFunctionNames<T>>(\n  contract: T | Falsy,\n  functionName: FN,\n  options?: TransactionOptions\n) {\n  const { library, chainId } = useEthers()\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\n  const [events, setEvents] = useState<LogDescription[] | undefined>(undefined)\n  const { bufferGasLimitPercentage = 0 } = useConfig()\n\n  const send = useCallback(\n    async (...args: Params<T, FN>): Promise<void> => {\n      if (contract) {\n        const hasOpts = args.length > (contract.interface?.getFunction(functionName).inputs.length ?? 0)\n\n        const contractWithSigner = connectContractToSigner(contract, options, library)\n        const opts = hasOpts ? args[args.length - 1] : undefined\n        const gasLimit = await estimateGasLimit(opts, library?.getSigner(), bufferGasLimitPercentage)\n\n        const modifiedOpts = {\n          ...opts,\n          gasLimit,\n        }\n        const modifiedArgs = hasOpts ? args.slice(0, args.length - 1) : args\n        modifiedArgs.push(modifiedOpts)\n\n        const receipt = await promiseTransaction(contractWithSigner[functionName](...modifiedArgs))\n        if (receipt?.logs) {\n          const events = receipt.logs.reduce((accumulatedLogs, log) => {\n            try {\n              return log.address.toLowerCase() === contract.address.toLowerCase()\n                ? [...accumulatedLogs, contract.interface.parseLog(log)]\n                : accumulatedLogs\n            } catch (_err) {\n              return accumulatedLogs\n            }\n          }, [] as LogDescription[])\n          setEvents(events)\n        }\n      }\n    },\n    [contract, functionName, options, library]\n  )\n\n  return { send, state, events, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}