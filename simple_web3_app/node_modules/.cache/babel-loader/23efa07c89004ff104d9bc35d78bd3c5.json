{"ast":null,"code":"import { utils } from 'ethers';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function warnOnInvalidCall(call) {\n  if (!call) {\n    return;\n  }\n\n  const {\n    contract,\n    method,\n    args\n  } = call;\n  console.warn(`Invalid contract call: address=${contract.address} method=${method} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function encodeCallData(call, chainId, isStatic) {\n  if (!call) {\n    return undefined;\n  }\n\n  const {\n    contract,\n    method,\n    args\n  } = call;\n\n  if (!contract.address || !method) {\n    warnOnInvalidCall(call);\n    return undefined;\n  }\n\n  try {\n    return {\n      address: contract.address,\n      data: contract.interface.encodeFunctionData(method, args),\n      chainId,\n      isStatic\n    };\n  } catch (_a) {\n    warnOnInvalidCall(call);\n    return undefined;\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function getUniqueActiveCalls(requests) {\n  const unique = [];\n  const used = {};\n\n  for (const request of requests) {\n    if (request.isDisabled) {\n      continue;\n    }\n\n    if (!used[`${request.address.toLowerCase()}${request.data}${request.chainId}`]) {\n      unique.push(request);\n      used[`${request.address.toLowerCase()}${request.data}${request.chainId}`] = true;\n    }\n  }\n\n  return unique;\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function decodeCallResult(call, result) {\n  if (!result || !call) {\n    return undefined;\n  }\n\n  const {\n    value,\n    success\n  } = result;\n\n  try {\n    if (success) {\n      return {\n        value: call.contract.interface.decodeFunctionResult(call.method, value),\n        error: undefined\n      };\n    } else {\n      const errorMessage = new utils.Interface(['function Error(string)']).decodeFunctionData('Error', value)[0];\n      return {\n        value: undefined,\n        error: new Error(errorMessage)\n      };\n    }\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AAKA;;;;AAGA,OAAM,SAAUC,iBAAV,CAA4BC,IAA5B,EAA8C;EAClD,IAAI,CAACA,IAAL,EAAW;IACT;EACD;;EACD,MAAM;IAAEC,QAAF;IAAYC,MAAZ;IAAoBC;EAApB,IAA6BH,IAAnC;EACAI,OAAO,CAACC,IAAR,CAAa,kCAAkCJ,QAAQ,CAACK,OAAO,WAAWJ,MAAM,SAASC,IAAI,EAA7F;AACD;AAED;;;;AAGA,OAAM,SAAUI,cAAV,CAAyBP,IAAzB,EAA6CQ,OAA7C,EAA8DC,QAA9D,EAAgF;EACpF,IAAI,CAACT,IAAL,EAAW;IACT,OAAOU,SAAP;EACD;;EACD,MAAM;IAAET,QAAF;IAAYC,MAAZ;IAAoBC;EAApB,IAA6BH,IAAnC;;EACA,IAAI,CAACC,QAAQ,CAACK,OAAV,IAAqB,CAACJ,MAA1B,EAAkC;IAChCH,iBAAiB,CAACC,IAAD,CAAjB;IACA,OAAOU,SAAP;EACD;;EACD,IAAI;IACF,OAAO;MAAEJ,OAAO,EAAEL,QAAQ,CAACK,OAApB;MAA6BK,IAAI,EAAEV,QAAQ,CAACW,SAAT,CAAmBC,kBAAnB,CAAsCX,MAAtC,EAA8CC,IAA9C,CAAnC;MAAwFK,OAAxF;MAAiGC;IAAjG,CAAP;EACD,CAFD,CAEE,WAAM;IACNV,iBAAiB,CAACC,IAAD,CAAjB;IACA,OAAOU,SAAP;EACD;AACF;AAED;;;;AAGA,OAAM,SAAUI,oBAAV,CAA+BC,QAA/B,EAAkD;EACtD,MAAMC,MAAM,GAAc,EAA1B;EACA,MAAMC,IAAI,GAA4B,EAAtC;;EACA,KAAK,MAAMC,OAAX,IAAsBH,QAAtB,EAAgC;IAC9B,IAAIG,OAAO,CAACC,UAAZ,EAAwB;MACtB;IACD;;IACD,IAAI,CAACF,IAAI,CAAC,GAAGC,OAAO,CAACZ,OAAR,CAAgBc,WAAhB,EAA6B,GAAGF,OAAO,CAACP,IAAI,GAAGO,OAAO,CAACV,OAAO,EAAlE,CAAT,EAAgF;MAC9EQ,MAAM,CAACK,IAAP,CAAYH,OAAZ;MACAD,IAAI,CAAC,GAAGC,OAAO,CAACZ,OAAR,CAAgBc,WAAhB,EAA6B,GAAGF,OAAO,CAACP,IAAI,GAAGO,OAAO,CAACV,OAAO,EAAlE,CAAJ,GAA4E,IAA5E;IACD;EACF;;EACD,OAAOQ,MAAP;AACD;AAWD;;;;AAGA,OAAM,SAAUM,gBAAV,CACJtB,IADI,EAEJuB,MAFI,EAEiB;EAErB,IAAI,CAACA,MAAD,IAAW,CAACvB,IAAhB,EAAsB;IACpB,OAAOU,SAAP;EACD;;EACD,MAAM;IAAEc,KAAF;IAASC;EAAT,IAAqBF,MAA3B;;EACA,IAAI;IACF,IAAIE,OAAJ,EAAa;MACX,OAAO;QACLD,KAAK,EAAExB,IAAI,CAACC,QAAL,CAAcW,SAAd,CAAwBc,oBAAxB,CAA6C1B,IAAI,CAACE,MAAlD,EAA0DsB,KAA1D,CADF;QAILG,KAAK,EAAEjB;MAJF,CAAP;IAMD,CAPD,MAOO;MACL,MAAMkB,YAAY,GAAW,IAAI9B,KAAK,CAAC+B,SAAV,CAAoB,CAAC,wBAAD,CAApB,EAAgDC,kBAAhD,CAAmE,OAAnE,EAA4EN,KAA5E,EAAmF,CAAnF,CAA7B;MACA,OAAO;QACLA,KAAK,EAAEd,SADF;QAELiB,KAAK,EAAE,IAAII,KAAJ,CAAUH,YAAV;MAFF,CAAP;IAID;EACF,CAfD,CAeE,OAAOD,KAAP,EAAc;IACd,OAAO;MACLH,KAAK,EAAEd,SADF;MAELiB,KAAK,EAAEA;IAFF,CAAP;EAID;AACF","names":["utils","warnOnInvalidCall","call","contract","method","args","console","warn","address","encodeCallData","chainId","isStatic","undefined","data","interface","encodeFunctionData","getUniqueActiveCalls","requests","unique","used","request","isDisabled","toLowerCase","push","decodeCallResult","result","value","success","decodeFunctionResult","error","errorMessage","Interface","decodeFunctionData","Error"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\helpers\\calls.ts"],"sourcesContent":["import { utils } from 'ethers'\nimport { Call } from '../hooks/useCall'\nimport { Awaited, ContractMethodNames, Falsy, TypedContract } from '../model/types'\nimport { RawCall, RawCallResult } from '../providers'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidCall(call: Call | Falsy) {\n  if (!call) {\n    return\n  }\n  const { contract, method, args } = call\n  console.warn(`Invalid contract call: address=${contract.address} method=${method} args=${args}`)\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeCallData(call: Call | Falsy, chainId: number, isStatic?: boolean): RawCall | Falsy {\n  if (!call) {\n    return undefined\n  }\n  const { contract, method, args } = call\n  if (!contract.address || !method) {\n    warnOnInvalidCall(call)\n    return undefined\n  }\n  try {\n    return { address: contract.address, data: contract.interface.encodeFunctionData(method, args), chainId, isStatic }\n  } catch {\n    warnOnInvalidCall(call)\n    return undefined\n  }\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function getUniqueActiveCalls(requests: RawCall[]) {\n  const unique: RawCall[] = []\n  const used: Record<string, boolean> = {}\n  for (const request of requests) {\n    if (request.isDisabled) {\n      continue\n    }\n    if (!used[`${request.address.toLowerCase()}${request.data}${request.chainId}`]) {\n      unique.push(request)\n      used[`${request.address.toLowerCase()}${request.data}${request.chainId}`] = true\n    }\n  }\n  return unique\n}\n\n/**\n * Result of a multicall call.\n * @public\n */\nexport type CallResult<T extends TypedContract, MN extends ContractMethodNames<T>> =\n  | { value: Awaited<ReturnType<T['functions'][MN]>>; error: undefined }\n  | { value: undefined; error: Error }\n  | undefined\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeCallResult<T extends TypedContract, MN extends ContractMethodNames<T>>(\n  call: Call | Falsy,\n  result: RawCallResult\n): CallResult<T, MN> {\n  if (!result || !call) {\n    return undefined\n  }\n  const { value, success } = result\n  try {\n    if (success) {\n      return {\n        value: call.contract.interface.decodeFunctionResult(call.method, value) as Awaited<\n          ReturnType<T['functions'][MN]>\n        >,\n        error: undefined,\n      }\n    } else {\n      const errorMessage: string = new utils.Interface(['function Error(string)']).decodeFunctionData('Error', value)[0]\n      return {\n        value: undefined,\n        error: new Error(errorMessage),\n      }\n    }\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error as Error,\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}