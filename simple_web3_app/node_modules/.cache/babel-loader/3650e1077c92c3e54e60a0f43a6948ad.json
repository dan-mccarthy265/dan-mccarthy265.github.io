{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\n\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n  var _useEthers = useEthers(),\n      providerChainId = _useEthers.chainId;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      tokenList = _useState2[0],\n      setTokenList = _useState2[1];\n\n  var chainId = overrideChainId || providerChainId;\n  useEffect(function () {\n    fetch(tokenListURI).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n        var _yield$response$json, name, logoURI, tokens, errorMessage;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!response.ok) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 3;\n                return response.json();\n\n              case 3:\n                _yield$response$json = _context.sent;\n                name = _yield$response$json.name;\n                logoURI = _yield$response$json.logoURI;\n                tokens = _yield$response$json.tokens;\n                setTokenList({\n                  name: name,\n                  logoURI: logoURI,\n                  tokens: tokens.filter(function (token) {\n                    var sameChainId = token.chainId === chainId;\n\n                    if (!tags) {\n                      return sameChainId;\n                    }\n\n                    return sameChainId && token.tags && token.tags.some(function (tag) {\n                      return tags.includes(tag);\n                    });\n                  })\n                });\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return response.text();\n\n              case 12:\n                errorMessage = _context.sent;\n                return _context.abrupt(\"return\", Promise.reject(new Error(errorMessage)));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(function (err) {\n      console.log(err);\n      setTokenList(undefined);\n    });\n  }, [tokenListURI, chainId]);\n  return tokenList;\n}","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,OAAM,SAAUC,YAAV,CAAuBC,YAAvB,EAA6CC,eAA7C,EAAuEC,IAAvE,EAAsF;EAC1F,iBAAqCJ,SAAS,EAA9C;EAAA,IAAiBK,eAAjB,cAAQC,OAAR;;EACA,gBAAkCP,QAAQ,EAA1C;EAAA;EAAA,IAAOQ,SAAP;EAAA,IAAkBC,YAAlB;;EAEA,IAAMF,OAAO,GAAGH,eAAe,IAAIE,eAAnC;EAEAP,SAAS,CAAC,YAAK;IACbW,KAAK,CAACP,YAAD,CAAL,CACGQ,IADH;MAAA,sEACQ,iBAAOC,QAAP;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,KACAA,QAAQ,CAACC,EADT;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAEsCD,QAAQ,CAACE,IAAT,EAFtC;;cAAA;gBAAA;gBAEMC,IAFN,wBAEMA,IAFN;gBAEYC,OAFZ,wBAEYA,OAFZ;gBAEqBC,MAFrB,wBAEqBA,MAFrB;gBAGFR,YAAY,CAAC;kBACXM,IAAI,EAAJA,IADW;kBAEXC,OAAO,EAAPA,OAFW;kBAGXC,MAAM,EAAGA,MAAsB,CAACC,MAAvB,CAA8B,UAACC,KAAD,EAAU;oBAC/C,IAAMC,WAAW,GAAGD,KAAK,CAACZ,OAAN,KAAkBA,OAAtC;;oBACA,IAAI,CAACF,IAAL,EAAW;sBACT,OAAOe,WAAP;oBACD;;oBACD,OAAOA,WAAW,IAAID,KAAK,CAACd,IAArB,IAA6Bc,KAAK,CAACd,IAAN,CAAWgB,IAAX,CAAgB,UAACC,GAAD;sBAAA,OAASjB,IAAI,CAACkB,QAAL,CAAcD,GAAd,CAAT;oBAAA,CAAhB,CAApC;kBACD,CANQ;gBAHE,CAAD,CAAZ;gBAHE;gBAAA;;cAAA;gBAAA;gBAAA,OAeyBV,QAAQ,CAACY,IAAT,EAfzB;;cAAA;gBAeIC,YAfJ;gBAAA,iCAgBKC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUH,YAAV,CAAf,CAhBL;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CADR;;MAAA;QAAA;MAAA;IAAA,KAoBGI,KApBH,CAoBS,UAACC,GAAD,EAAQ;MACbC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACArB,YAAY,CAACwB,SAAD,CAAZ;IACD,CAvBH;EAwBD,CAzBQ,EAyBN,CAAC9B,YAAD,EAAeI,OAAf,CAzBM,CAAT;EA2BA,OAAOC,SAAP;AACD","names":["useEffect","useState","useEthers","useTokenList","tokenListURI","overrideChainId","tags","providerChainId","chainId","tokenList","setTokenList","fetch","then","response","ok","json","name","logoURI","tokens","filter","token","sameChainId","some","tag","includes","text","errorMessage","Promise","reject","Error","catch","err","console","log","undefined"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useTokenList.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { useEthers } from './useEthers'\n\n/**\n * @public\n */\nexport interface TokenList {\n  name: string\n  logoURI: string\n  tokens: TokenInfo[]\n}\n\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI: string, overrideChainId?: number, tags?: string[]): TokenList | undefined {\n  const { chainId: providerChainId } = useEthers()\n  const [tokenList, setTokenList] = useState<TokenList>()\n\n  const chainId = overrideChainId || providerChainId\n\n  useEffect(() => {\n    fetch(tokenListURI)\n      .then(async (response) => {\n        if (response.ok) {\n          const { name, logoURI, tokens } = await response.json()\n          setTokenList({\n            name,\n            logoURI,\n            tokens: (tokens as TokenInfo[]).filter((token) => {\n              const sameChainId = token.chainId === chainId\n              if (!tags) {\n                return sameChainId\n              }\n              return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag))\n            }),\n          })\n        } else {\n          const errorMessage = await response.text()\n          return Promise.reject(new Error(errorMessage))\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n        setTokenList(undefined)\n      })\n  }, [tokenListURI, chainId])\n\n  return tokenList\n}\n"]},"metadata":{},"sourceType":"module"}