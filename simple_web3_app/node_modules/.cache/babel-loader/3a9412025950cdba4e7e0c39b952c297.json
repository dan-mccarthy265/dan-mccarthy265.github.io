{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_CALLS') {\n    return [].concat(_toConsumableArray(state), _toConsumableArray(action.calls.map(function (call) {\n      return Object.assign(Object.assign({}, call), {\n        address: call.address.toLowerCase()\n      });\n    })));\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(function (call) {\n      return call.isStatic ? Object.assign(Object.assign({}, call), {\n        isDisabled: true\n      }) : call;\n    });\n  } else {\n    var finalState = state;\n\n    var _iterator = _createForOfIteratorHelper(action.calls),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var call = _step.value;\n        var index = finalState.findIndex(function (x) {\n          return x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data;\n        });\n\n        if (index !== -1) {\n          finalState = finalState.filter(function (_, i) {\n            return i !== index;\n          });\n        }\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return finalState;\n  }\n}","map":{"version":3,"mappings":";;;AA2CA;;;AAGA,OAAM,SAAUA,YAAV,GAA4D;EAAA,IAArCC,KAAqC,uEAAlB,EAAkB;EAAA,IAAdC,MAAc;;EAChE,IAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;IAC/B,oCAAWF,KAAX,sBAAqBC,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,UAACC,IAAD;MAAA,OAAUC,gCAAMD,IAAN,GAAU;QAAEE,OAAO,EAAEF,IAAI,CAACE,OAAL,CAAaC,WAAb;MAAX,CAAV,CAAV;IAAA,CAAjB,CAArB;EACD,CAFD,MAEO,IAAIP,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;IACzC,OAAOF,KAAK,CAACI,GAAN,CAAU,UAACC,IAAD;MAAA,OACfA,IAAI,CAACI,QAAL,GACGH,gCACMD,IADN,GACU;QACPK,UAAU,EAAE;MADL,CADV,CADH,GAKIL,IANW;IAAA,CAAV,CAAP;EAQD,CATM,MASA;IACL,IAAIM,UAAU,GAAGX,KAAjB;;IADK,2CAEcC,MAAM,CAACE,KAFrB;IAAA;;IAAA;MAAA;QAAA,IAEME,IAFN;QAGH,IAAMO,KAAK,GAAGD,UAAU,CAACE,SAAX,CACZ,UAACC,CAAD;UAAA,OAAOA,CAAC,CAACP,OAAF,CAAUC,WAAV,OAA4BH,IAAI,CAACE,OAAL,CAAaC,WAAb,EAA5B,IAA0DM,CAAC,CAACC,IAAF,KAAWV,IAAI,CAACU,IAAjF;QAAA,CADY,CAAd;;QAGA,IAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;UAChBD,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,UAACC,CAAD,EAAIC,CAAJ;YAAA,OAAUA,CAAC,KAAKN,KAAhB;UAAA,CAAlB,CAAb;QACD;MARE;;MAEL,oDAAiC;QAAA;MAOhC;IATI;MAAA;IAAA;MAAA;IAAA;;IAUL,OAAOD,UAAP;EACD;AACF","names":["callsReducer","state","action","type","calls","map","call","Object","address","toLowerCase","isStatic","isDisabled","finalState","index","findIndex","x","data","filter","_","i"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\callsReducer.ts"],"sourcesContent":["import { ChainId } from '../../..'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport type Action = AddCall | RemoveCall | UpdateCall\n\n/**\n * @public\n */\nexport interface RawCall {\n  chainId: ChainId\n  address: string\n  data: string\n  isStatic?: boolean\n  isDisabled?: boolean\n}\n\n/**\n * @deprecated It's recommended to use RawCall instead\n * @internal Intended for internal use - use it on your own risk\n */\nexport interface ChainCall {\n  chainId?: ChainId\n  address: string\n  data: string\n}\n\ninterface AddCall {\n  type: 'ADD_CALLS'\n  calls: RawCall[]\n}\n\ninterface UpdateCall {\n  type: 'UPDATE_CALLS'\n  calls: RawCall[]\n}\n\ninterface RemoveCall {\n  type: 'REMOVE_CALLS'\n  calls: RawCall[]\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state: RawCall[] = [], action: Action) {\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map((call) => ({ ...call, address: call.address.toLowerCase() }))]\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map((call) =>\n      call.isStatic\n        ? {\n            ...call,\n            isDisabled: true,\n          }\n        : call\n    )\n  } else {\n    let finalState = state\n    for (const call of action.calls) {\n      const index = finalState.findIndex(\n        (x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data\n      )\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index)\n      }\n    }\n    return finalState\n  }\n}\n"]},"metadata":{},"sourceType":"module"}