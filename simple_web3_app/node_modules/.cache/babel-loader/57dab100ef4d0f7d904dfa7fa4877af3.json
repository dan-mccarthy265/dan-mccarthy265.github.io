{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useCall } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns ether balance of a given account.\n * @param address address of an account\n * @returns a balance of the account which is BigNumber or `undefined` if not connected to network or address is a falsy value\n * @public\n *\n * @example\n * const { account } = useEthers()\n * const etherBalance = useEtherBalance(account)\n *\n * return (\n *   {etherBalance && <p>Ether balance: {formatEther(etherBalance)} ETH </p>}\n * )\n */\n\nexport function useEtherBalance(address) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  var multicallAddress = useMulticallAddress(queryParams);\n\n  var _ref = (_a = useCall(multicallAddress && address && {\n    contract: new Contract(multicallAddress, MultiCallABI),\n    method: 'getEthBalance',\n    args: [address]\n  }, queryParams)) !== null && _a !== void 0 ? _a : {},\n      value = _ref.value;\n\n  return value === null || value === void 0 ? void 0 : value[0];\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAIA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,eAAV,CAA0BC,OAA1B,EAAgF;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;;;EACpF,IAAMC,gBAAgB,GAAGN,mBAAmB,CAACK,WAAD,CAA5C;;EACA,WACE,aAAO,CACLC,gBAAgB,IACdF,OADF,IACa;IACTG,QAAQ,EAAE,IAAIL,QAAJ,CAAaI,gBAAb,EAA+BP,YAA/B,CADD;IAETS,MAAM,EAAE,eAFC;IAGTC,IAAI,EAAE,CAACL,OAAD;EAHG,CAFR,EAOLC,WAPK,CAAP,MAQC,IARD,IAQCK,aARD,GAQCA,EARD,GAQK,EATP;EAAA,IAAeC,KAAf,QAAQA,KAAR;;EAUA,OAAOA,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAG,CAAH,CAAZ;AACD","names":["MultiCallABI","useMulticallAddress","useCall","Contract","useEtherBalance","address","queryParams","multicallAddress","contract","method","args","_a","value"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useEtherBalance.ts"],"sourcesContent":["import { MultiCallABI } from '../constants'\nimport { useMulticallAddress } from './useMulticallAddress'\nimport { Falsy } from '../model/types'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useCall } from './useCall'\nimport { Contract } from 'ethers'\n\n/**\n * Returns ether balance of a given account.\n * @param address address of an account\n * @returns a balance of the account which is BigNumber or `undefined` if not connected to network or address is a falsy value\n * @public\n *\n * @example\n * const { account } = useEthers()\n * const etherBalance = useEtherBalance(account)\n *\n * return (\n *   {etherBalance && <p>Ether balance: {formatEther(etherBalance)} ETH </p>}\n * )\n */\nexport function useEtherBalance(address: string | Falsy, queryParams: QueryParams = {}): BigNumber | undefined {\n  const multicallAddress = useMulticallAddress(queryParams)\n  const { value: value } =\n    useCall(\n      multicallAddress &&\n        address && {\n          contract: new Contract(multicallAddress, MultiCallABI),\n          method: 'getEthBalance',\n          args: [address],\n        },\n      queryParams\n    ) ?? {}\n  return value?.[0]\n}\n"]},"metadata":{},"sourceType":"module"}