{"ast":null,"code":"import _slicedToArray from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { BlockNumberContext } from './context';\nimport { blockNumberReducer } from '../common/reducer';\nimport { useDebounce, useEthers } from '../../../hooks';\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function BlockNumberProvider(_ref) {\n  var children = _ref.children;\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var _useReducer = useReducer(blockNumberReducer, {}),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  useEffect(function () {\n    return subscribeToNewBlock(library, chainId, dispatch);\n  }, [library, chainId]);\n  var debouncedState = useDebounce(state, 100);\n  var blockNumber = chainId !== undefined ? debouncedState[chainId] : undefined;\n  return _jsx(BlockNumberContext.Provider, {\n    value: blockNumber,\n    children: children\n  });\n}","map":{"version":3,"mappings":";;AAAA,SAAoBA,SAApB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,SAASC,mBAAT,QAAoC,+BAApC;AAMA;;;;AAGA,OAAM,SAAUC,mBAAV,OAAiD;EAAA,IAAjBC,QAAiB,QAAjBA,QAAiB;;EACrD,iBAA6BH,SAAS,EAAtC;EAAA,IAAQI,OAAR,cAAQA,OAAR;EAAA,IAAiBC,OAAjB,cAAiBA,OAAjB;;EACA,kBAA0BT,UAAU,CAACE,kBAAD,EAAqB,EAArB,CAApC;EAAA;EAAA,IAAOQ,KAAP;EAAA,IAAcC,QAAd;;EAEAZ,SAAS,CAAC;IAAA,OAAMM,mBAAmB,CAACG,OAAD,EAAUC,OAAV,EAAmBE,QAAnB,CAAzB;EAAA,CAAD,EAAwD,CAACH,OAAD,EAAUC,OAAV,CAAxD,CAAT;EAEA,IAAMG,cAAc,GAAGT,WAAW,CAACO,KAAD,EAAQ,GAAR,CAAlC;EACA,IAAMG,WAAW,GAAGJ,OAAO,KAAKK,SAAZ,GAAwBF,cAAc,CAACH,OAAD,CAAtC,GAAkDK,SAAtE;EAEA,OAAOC,KAACd,kBAAkB,CAACe,QAApB,EAA4B;IAACC,KAAK,EAAEJ,WAAR;IAAqBN,QAAQ,EAAEA;EAA/B,CAA5B,CAAP;AACD","names":["useEffect","useReducer","BlockNumberContext","blockNumberReducer","useDebounce","useEthers","subscribeToNewBlock","BlockNumberProvider","children","library","chainId","state","dispatch","debouncedState","blockNumber","undefined","_jsx","Provider","value"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/providers/blockNumber/blockNumber/provider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useReducer } from 'react'\nimport { BlockNumberContext } from './context'\nimport { blockNumberReducer } from '../common/reducer'\nimport { useDebounce, useEthers } from '../../../hooks'\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock'\n\ninterface Props {\n  children: ReactNode\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function BlockNumberProvider({ children }: Props) {\n  const { library, chainId } = useEthers()\n  const [state, dispatch] = useReducer(blockNumberReducer, {})\n\n  useEffect(() => subscribeToNewBlock(library, chainId, dispatch), [library, chainId])\n\n  const debouncedState = useDebounce(state, 100)\n  const blockNumber = chainId !== undefined ? debouncedState[chainId] : undefined\n\n  return <BlockNumberContext.Provider value={blockNumber} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}