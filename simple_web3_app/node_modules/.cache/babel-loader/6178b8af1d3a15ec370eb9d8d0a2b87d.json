{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Contract } from '@ethersproject/contracts';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nvar ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\n\nexport var multicall2Factory = function multicall2Factory(fastEncoding) {\n  return fastEncoding ? fastEncodingMulticall2 : multicall2;\n};\n/**\n * @public\n */\n\nexport function multicall2(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n/**\n * @public\n */\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var contract, results;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.tryAggregate(false, requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            results = _context.sent;\n            return _context.abrupt(\"return\", decodeResult(results, requests));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}\n\nexport function fastEncodingMulticall2(_x5, _x6, _x7, _x8) {\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction _fastEncodingMulticall() {\n  _fastEncodingMulticall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, address, blockNumber, requests) {\n    var response, _decodeTryAggregate, _decodeTryAggregate2, results;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {});\n\n          case 2:\n            _context2.next = 4;\n            return provider.call({\n              to: address,\n              data: encodeTryAggregate(false, requests.map(function (_ref2) {\n                var address = _ref2.address,\n                    data = _ref2.data;\n                return [address, data];\n              }))\n            }, blockNumber);\n\n          case 4:\n            response = _context2.sent;\n            _decodeTryAggregate = decodeTryAggregate(response), _decodeTryAggregate2 = _slicedToArray(_decodeTryAggregate, 1), results = _decodeTryAggregate2[0];\n            return _context2.abrupt(\"return\", decodeResult(results, requests));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction decodeResult(results, requests) {\n  var _a;\n\n  var state = {};\n\n  for (var i = 0; i < requests.length; i++) {\n    var _requests$i = requests[i],\n        address = _requests$i.address,\n        data = _requests$i.data;\n\n    var _results$i = _slicedToArray(results[i], 2),\n        success = _results$i[0],\n        value = _results$i[1];\n\n    var stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      success: success,\n      value: value\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"mappings":";;;AAAA,SAASA,QAAT,QAAyB,0BAAzB;AAEA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,yBAAvD;AAIA,IAAMC,GAAG,GAAG,CACV,yJADU,CAAZ;AAIA;;;;AAGA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,YAAD;EAAA,OAA4BA,YAAY,GAAGC,sBAAH,GAA4BC,UAApE;AAAA,CAA1B;AAEP;;;;AAGA,gBAAsBA,UAAtB;EAAA;AAAA;AAkBA;;;;;0EAlBO,iBACLC,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAMDA,QAAQ,CAACC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,iCAOI,EAPJ;;UAAA;YASCC,QATD,GASY,IAAIb,QAAJ,CAAaS,OAAb,EAAsBN,GAAtB,EAA2BK,QAA3B,CATZ;YAAA;YAAA,OAUsCK,QAAQ,CAACC,YAAT,CACzC,KADyC,EAEzCH,QAAQ,CAACI,GAAT,CAAa;cAAA,IAAGN,OAAH,QAAGA,OAAH;cAAA,IAAYO,IAAZ,QAAYA,IAAZ;cAAA,OAAuB,CAACP,OAAD,EAAUO,IAAV,CAAvB;YAAA,CAAb,CAFyC,EAGzC;cAAEC,QAAQ,EAAEP;YAAZ,CAHyC,CAVtC;;UAAA;YAUCQ,OAVD;YAAA,iCAeEC,YAAY,CAACD,OAAD,EAAUP,QAAV,CAfd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAqBP,gBAAsBL,sBAAtB;EAAA;AAAA;;;sFAAO,kBACLE,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MAMDA,QAAQ,CAACC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,kCAOI,EAPJ;;UAAA;YAAA;YAAA,OASkBJ,QAAQ,CAACY,IAAT,CACrB;cACEC,EAAE,EAAEZ,OADN;cAEEO,IAAI,EAAEd,kBAAkB,CACtB,KADsB,EAEtBS,QAAQ,CAACI,GAAT,CAAa;gBAAA,IAAGN,OAAH,SAAGA,OAAH;gBAAA,IAAYO,IAAZ,SAAYA,IAAZ;gBAAA,OAAuB,CAACP,OAAD,EAAUO,IAAV,CAAvB;cAAA,CAAb,CAFsB;YAF1B,CADqB,EAQrBN,WARqB,CATlB;;UAAA;YASCY,QATD;YAAA,sBAmBarB,kBAAkB,CAACqB,QAAD,CAnB/B,iEAmBEJ,OAnBF;YAAA,kCAoBEC,YAAY,CAACD,OAAD,EAAUP,QAAV,CApBd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAuBP,SAASQ,YAAT,CAAsBD,OAAtB,EAAoDP,QAApD,EAAuE;;;EACrE,IAAMY,KAAK,GAAe,EAA1B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAAQ,CAACC,MAA7B,EAAqCY,CAAC,EAAtC,EAA0C;IACxC,kBAA0Bb,QAAQ,CAACa,CAAD,CAAlC;IAAA,IAAQf,OAAR,eAAQA,OAAR;IAAA,IAAiBO,IAAjB,eAAiBA,IAAjB;;IACA,gCAAyBE,OAAO,CAACM,CAAD,CAAhC;IAAA,IAAOC,OAAP;IAAA,IAAgBC,KAAhB;;IACA,IAAMC,eAAe,GAAG,WAAK,CAAClB,OAAD,CAAL,MAAc,IAAd,IAAcmB,aAAd,GAAcA,EAAd,GAAkB,EAA1C;IACAD,eAAe,CAACX,IAAD,CAAf,GAAwB;MAAES,OAAO,EAAPA,OAAF;MAAWC,KAAK,EAALA;IAAX,CAAxB;IACAH,KAAK,CAACd,OAAD,CAAL,GAAiBkB,eAAjB;EACD;;EACD,OAAOJ,KAAP;AACD","names":["Contract","decodeTryAggregate","encodeTryAggregate","ABI","multicall2Factory","fastEncoding","fastEncodingMulticall2","multicall2","provider","address","blockNumber","requests","length","contract","tryAggregate","map","data","blockTag","results","decodeResult","call","to","response","state","i","success","value","stateForAddress","_a"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/providers/chainState/common/multicall2.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/providers'\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2'\nimport { RawCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\n]\n\n/**\n * @public\n */\nexport const multicall2Factory = (fastEncoding: boolean) => (fastEncoding ? fastEncodingMulticall2 : multicall2)\n\n/**\n * @public\n */\nexport async function multicall2(\n  provider: Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const results: [boolean, string][] = await contract.tryAggregate(\n    false,\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  return decodeResult(results, requests)\n}\n\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(\n  provider: Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const response = await provider.call(\n    {\n      to: address,\n      data: encodeTryAggregate(\n        false,\n        requests.map(({ address, data }) => [address, data])\n      ),\n    },\n    blockNumber\n  )\n  const [results] = decodeTryAggregate(response)\n  return decodeResult(results, requests)\n}\n\nfunction decodeResult(results: [boolean, string][], requests: RawCall[]) {\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const [success, value] = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = { success, value }\n    state[address] = stateForAddress\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}