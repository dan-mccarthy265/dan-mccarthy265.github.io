{"ast":null,"code":"import _classCallCheck from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BigNumber } from '@ethersproject/bignumber';\n/**\n * @public\n */\n\nexport var CurrencyValue = /*#__PURE__*/function () {\n  function CurrencyValue(currency, value) {\n    _classCallCheck(this, CurrencyValue);\n\n    this.currency = currency;\n    this.value = value;\n  }\n\n  _createClass(CurrencyValue, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value.toString();\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      var overrideOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.currency.format(this.value.toString(), overrideOptions);\n    }\n  }, {\n    key: \"checkCurrency\",\n    value: function checkCurrency(other) {\n      if (this.currency !== other.currency) {\n        throw new TypeError(\"Currency mismatch \".concat(this.currency.ticker, \" != \").concat(other.currency.ticker));\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(fn) {\n      return new CurrencyValue(this.currency, fn(this.value));\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      this.checkCurrency(other);\n      return this.map(function (x) {\n        return x.add(other.value);\n      });\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      this.checkCurrency(other);\n      return this.map(function (x) {\n        return x.sub(other.value);\n      });\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(value) {\n      return this.map(function (x) {\n        return x.mul(value);\n      });\n    }\n  }, {\n    key: \"div\",\n    value: function div(value) {\n      return this.map(function (x) {\n        return x.div(value);\n      });\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(value) {\n      return this.map(function (x) {\n        return x.mod(value);\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.currency === other.currency && this.value.eq(other.value);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      this.checkCurrency(other);\n      return this.value.lt(other.value);\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      this.checkCurrency(other);\n      return this.value.lte(other.value);\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      this.checkCurrency(other);\n      return this.value.gt(other.value);\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      this.checkCurrency(other);\n      return this.value.gte(other.value);\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this.value.isZero();\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(currency, value) {\n      return new CurrencyValue(currency, BigNumber.from(value));\n    }\n  }, {\n    key: \"zero\",\n    value: function zero(currency) {\n      return new CurrencyValue(currency, BigNumber.from(0));\n    }\n  }]);\n\n  return CurrencyValue;\n}();","map":{"version":3,"mappings":"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","names":["BigNumber","CurrencyValue","currency","value","toString","overrideOptions","format","other","TypeError","ticker","fn","checkCurrency","map","x","add","sub","mul","div","mod","eq","lt","lte","gt","gte","isZero","from"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\model\\CurrencyValue.ts"],"sourcesContent":["import { BigNumber, BigNumberish } from '@ethersproject/bignumber'\nimport { Currency } from './Currency'\nimport { CurrencyFormatOptions } from './formatting'\n\n/**\n * @public\n */\nexport class CurrencyValue {\n  constructor(readonly currency: Currency, readonly value: BigNumber) {}\n\n  static fromString(currency: Currency, value: string) {\n    return new CurrencyValue(currency, BigNumber.from(value))\n  }\n\n  static zero(currency: Currency) {\n    return new CurrencyValue(currency, BigNumber.from(0))\n  }\n\n  toString() {\n    return this.value.toString()\n  }\n\n  format(overrideOptions: Partial<CurrencyFormatOptions> = {}) {\n    return this.currency.format(this.value.toString(), overrideOptions)\n  }\n\n  private checkCurrency(other: CurrencyValue) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`)\n    }\n  }\n\n  map(fn: (value: BigNumber) => BigNumber) {\n    return new CurrencyValue(this.currency, fn(this.value))\n  }\n\n  add(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.add(other.value))\n  }\n\n  sub(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.sub(other.value))\n  }\n\n  mul(value: BigNumberish) {\n    return this.map((x) => x.mul(value))\n  }\n\n  div(value: BigNumberish) {\n    return this.map((x) => x.div(value))\n  }\n\n  mod(value: BigNumberish) {\n    return this.map((x) => x.mod(value))\n  }\n\n  equals(other: CurrencyValue) {\n    return this.currency === other.currency && this.value.eq(other.value)\n  }\n\n  lt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lt(other.value)\n  }\n\n  lte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lte(other.value)\n  }\n\n  gt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gt(other.value)\n  }\n\n  gte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gte(other.value)\n  }\n\n  isZero() {\n    return this.value.isZero()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}