{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber/blockNumber';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from '../hooks';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider, ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\n/**\n * Provides basic services for a DApp.\n * @public\n */\n\nexport function DAppProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    })\n  }));\n}\n\nvar getMulticallAddresses = function getMulticallAddresses(networks) {\n  var result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(function (network) {\n    return result[network.chainId] = network.multicallAddress;\n  });\n  return result;\n};\n\nvar getMulticall2Addresses = function getMulticall2Addresses(networks) {\n  var result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(function (network) {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  var children = _ref2.children;\n\n  var _useConfig = useConfig(),\n      multicallAddresses = _useConfig.multicallAddresses,\n      networks = _useConfig.networks,\n      multicallVersion = _useConfig.multicallVersion;\n\n  var defaultAddresses = useMemo(function () {\n    return multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks);\n  }, [networks, multicallVersion]);\n  var multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(ReadonlyNetworksProvider, {\n    children: _jsx(NetworkProvider, {\n      children: _jsx(BlockNumberProvider, {\n        children: _jsx(BlockNumbersProvider, {\n          children: _jsx(LocalMulticallProvider, {\n            children: _jsx(MultiChainStateProvider, Object.assign({\n              multicallAddresses: multicallAddressesMerged\n            }, {\n              children: _jsx(NotificationsProvider, {\n                children: _jsx(TransactionProvider, {\n                  children: children\n                })\n              })\n            }))\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,OAApB,QAAmC,OAAnC;AAEA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,uBAAT,QAAwC,cAAxC;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,eAAT,EAA0BC,wBAA1B,QAA0D,WAA1D;AACA,SAASC,oBAAT,QAAqC,4BAArC;AAUA;;;;;AAIA,OAAM,SAAUC,YAAV,OAA8D;EAAA,IAArCC,MAAqC,QAArCA,MAAqC;EAAA,IAA7BC,QAA6B,QAA7BA,QAA6B;EAClE,OACEC,KAACb,cAAD,EAAec;IAACH,MAAM,EAAEA;EAAT,GAAe;IAAAC,UAC5BC,KAACE,sBAAD,EAAuB;MAAAH,UAAEA;IAAF,CAAvB;EAD4B,CAAf,CAAf,CADF;AAKD;;AAMD,IAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAkC;EAC9D,IAAMC,MAAM,GAAgC,EAA5C;EACAD,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAkB,UAACC,OAAD;IAAA,OAAcF,MAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACE,gBAAhD;EAAA,CAAlB;EACA,OAAOJ,MAAP;AACD,CAJD;;AAMA,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACN,QAAD,EAAkC;EAC/D,IAAMC,MAAM,GAAgC,EAA5C;EACAD,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAkB,UAACC,OAAD,EAAY;IAC5B,IAAIA,OAAO,CAACI,iBAAZ,EAA+B;MAC7BN,MAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACI,iBAAlC;IACD;EACF,CAJD;EAKA,OAAON,MAAP;AACD,CARD;;AAUA,SAASH,sBAAT,QAA6D;EAAA,IAA3BH,QAA2B,SAA3BA,QAA2B;;EAC3D,iBAA2DT,SAAS,EAApE;EAAA,IAAQsB,kBAAR,cAAQA,kBAAR;EAAA,IAA4BR,QAA5B,cAA4BA,QAA5B;EAAA,IAAsCS,gBAAtC,cAAsCA,gBAAtC;;EACA,IAAMC,gBAAgB,GAAG5B,OAAO,CAC9B;IAAA,OAAO2B,gBAAgB,KAAK,CAArB,GAAyBV,qBAAqB,CAACC,QAAD,CAA9C,GAA2DM,sBAAsB,CAACN,QAAD,CAAxF;EAAA,CAD8B,EAE9B,CAACA,QAAD,EAAWS,gBAAX,CAF8B,CAAhC;EAIA,IAAME,wBAAwB,mCAAQD,gBAAR,GAA6BF,kBAA7B,CAA9B;EAEA,OACEZ,KAACL,wBAAD,EAAyB;IAAAI,UACvBC,KAACN,eAAD,EAAgB;MAAAK,UACdC,KAACZ,mBAAD,EAAoB;QAAAW,UAClBC,KAACJ,oBAAD,EAAqB;UAAAG,UACnBC,KAACP,sBAAD,EAAuB;YAAAM,UACrBC,KAACX,uBAAD,EAAwBY;cAACW,kBAAkB,EAAEG;YAArB,GAA6C;cAAAhB,UACnEC,KAACT,qBAAD,EAAsB;gBAAAQ,UACpBC,KAACR,mBAAD,EAAoB;kBAAAO,UAAEA;gBAAF,CAApB;cADoB,CAAtB;YADmE,CAA7C,CAAxB;UADqB,CAAvB;QADmB,CAArB;MADkB,CAApB;IADc,CAAhB;EADuB,CAAzB,CADF;AAiBD","names":["useMemo","ConfigProvider","BlockNumberProvider","MultiChainStateProvider","useConfig","NotificationsProvider","TransactionProvider","LocalMulticallProvider","NetworkProvider","ReadonlyNetworksProvider","BlockNumbersProvider","DAppProvider","config","children","_jsx","Object","DAppProviderWithConfig","getMulticallAddresses","networks","result","forEach","network","chainId","multicallAddress","getMulticall2Addresses","multicall2Address","multicallAddresses","multicallVersion","defaultAddresses","multicallAddressesMerged"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/providers/DAppProvider.tsx"],"sourcesContent":["import { ReactNode, useMemo } from 'react'\nimport { Config, Chain } from '../constants'\nimport { ConfigProvider } from './config'\nimport { BlockNumberProvider } from './blockNumber/blockNumber'\nimport { MultiChainStateProvider } from './chainState'\nimport { useConfig } from '../hooks'\nimport { NotificationsProvider } from './notifications/provider'\nimport { TransactionProvider } from './transactions/provider'\nimport { LocalMulticallProvider } from './LocalMulticallProvider'\nimport { NetworkProvider, ReadonlyNetworksProvider } from './network'\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers'\n\nexport interface DAppProviderProps {\n  children?: ReactNode\n  /**\n   * Configuration of the DApp. See {@link Config} for more details.\n   */\n  config: Config\n}\n\n/**\n * Provides basic services for a DApp.\n * @public\n */\nexport function DAppProvider({ config, children }: DAppProviderProps) {\n  return (\n    <ConfigProvider config={config}>\n      <DAppProviderWithConfig>{children}</DAppProviderWithConfig>\n    </ConfigProvider>\n  )\n}\n\ninterface WithConfigProps {\n  children: ReactNode\n}\n\nconst getMulticallAddresses = (networks: Chain[] | undefined) => {\n  const result: { [index: number]: string } = {}\n  networks?.forEach((network) => (result[network.chainId] = network.multicallAddress))\n  return result\n}\n\nconst getMulticall2Addresses = (networks: Chain[] | undefined) => {\n  const result: { [index: number]: string } = {}\n  networks?.forEach((network) => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address\n    }\n  })\n  return result\n}\n\nfunction DAppProviderWithConfig({ children }: WithConfigProps) {\n  const { multicallAddresses, networks, multicallVersion } = useConfig()\n  const defaultAddresses = useMemo(\n    () => (multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks)),\n    [networks, multicallVersion]\n  )\n  const multicallAddressesMerged = { ...defaultAddresses, ...multicallAddresses }\n\n  return (\n    <ReadonlyNetworksProvider>\n      <NetworkProvider>\n        <BlockNumberProvider>\n          <BlockNumbersProvider>\n            <LocalMulticallProvider>\n              <MultiChainStateProvider multicallAddresses={multicallAddressesMerged}>\n                <NotificationsProvider>\n                  <TransactionProvider>{children}</TransactionProvider>\n                </NotificationsProvider>\n              </MultiChainStateProvider>\n            </LocalMulticallProvider>\n          </BlockNumbersProvider>\n        </BlockNumberProvider>\n      </NetworkProvider>\n    </ReadonlyNetworksProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}