{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { getChainById } from '../helpers';\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig } from '../hooks';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport multicall2ABI from '../constants/abi/MultiCall2.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\n\nexport function LocalMulticallProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const updateConfig = useUpdateConfig();\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    multicallAddresses,\n    multicallVersion\n  } = useConfig();\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n  const blockNumber = useBlockNumber();\n  useEffect(() => {\n    var _a;\n\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const signer = library.getSigner();\n\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error);\n        return;\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying);\n\n      const deployMulticall = async () => {\n        try {\n          const {\n            contractAddress,\n            blockNumber\n          } = await deployContract(multicallVersion === 1 ? multicallABI : multicall2ABI, signer);\n          updateConfig({\n            multicallAddresses: {\n              [chainId]: contractAddress\n            }\n          });\n          setMulticallBlockNumber(blockNumber);\n          setLocalMulticallState(LocalMulticallState.Deployed);\n        } catch (_a) {\n          setLocalMulticallState(LocalMulticallState.Error);\n        }\n      };\n\n      void deployMulticall();\n    }\n  }, [library, chainId]);\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    });\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    });\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["useEffect","useState","getChainById","useEthers","useBlockNumber","useConfig","useUpdateConfig","multicallABI","multicall2ABI","deployContract","LocalMulticallState","LocalMulticallProvider","children","updateConfig","library","chainId","multicallAddresses","multicallVersion","localMulticallState","setLocalMulticallState","Unknown","multicallBlockNumber","setMulticallBlockNumber","blockNumber","_a","isLocalChain","NonLocal","Deployed","Deploying","signer","getSigner","Error","deployMulticall","contractAddress","awaitingMulticallBlock","_jsx"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\LocalMulticallProvider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useState } from 'react'\nimport { getChainById } from '../helpers'\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig } from '../hooks'\nimport multicallABI from '../constants/abi/MultiCall.json'\nimport multicall2ABI from '../constants/abi/MultiCall2.json'\nimport { deployContract } from '../helpers/contract'\n\ninterface LocalMulticallProps {\n  children: ReactNode\n}\n\nenum LocalMulticallState {\n  Unknown,\n  NonLocal,\n  Deploying,\n  Deployed,\n  Error,\n}\n\nexport function LocalMulticallProvider({ children }: LocalMulticallProps) {\n  const updateConfig = useUpdateConfig()\n  const { library, chainId } = useEthers()\n  const { multicallAddresses, multicallVersion } = useConfig()\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown)\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState<number>()\n  const blockNumber = useBlockNumber()\n\n  useEffect(() => {\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown)\n    } else if (!getChainById(chainId)?.isLocalChain) {\n      setLocalMulticallState(LocalMulticallState.NonLocal)\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed)\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const signer = library.getSigner()\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error)\n        return\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying)\n\n      const deployMulticall = async () => {\n        try {\n          const { contractAddress, blockNumber } = await deployContract(\n            multicallVersion === 1 ? multicallABI : multicall2ABI,\n            signer\n          )\n          updateConfig({ multicallAddresses: { [chainId]: contractAddress } })\n          setMulticallBlockNumber(blockNumber)\n          setLocalMulticallState(LocalMulticallState.Deployed)\n        } catch {\n          setLocalMulticallState(LocalMulticallState.Error)\n        }\n      }\n      void deployMulticall()\n    }\n  }, [library, chainId])\n\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber\n\n  if (\n    localMulticallState === LocalMulticallState.Deploying ||\n    (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)\n  ) {\n    return <div>Deploying multicall...</div>\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return <div>Error deploying multicall contract</div>\n  } else {\n    return <>{children}</>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}