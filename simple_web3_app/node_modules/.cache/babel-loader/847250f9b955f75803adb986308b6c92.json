{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { BigNumber, errors } from 'ethers';\n/**\n * @internal\n */\n\nexport function estimateGasLimit(_x, _x2, _x3) {\n  return _estimateGasLimit.apply(this, arguments);\n}\n\nfunction _estimateGasLimit() {\n  _estimateGasLimit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(transactionRequest, signer, bufferGasLimitPercentage) {\n    var estimatedGas;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(!signer || !transactionRequest)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", undefined);\n\n          case 2:\n            if (!transactionRequest.gasLimit) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.t0 = BigNumber.from(transactionRequest.gasLimit);\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.next = 8;\n            return signer.estimateGas(transactionRequest);\n\n          case 8:\n            _context2.t0 = _context2.sent;\n\n          case 9:\n            estimatedGas = _context2.t0;\n            return _context2.abrupt(\"return\", estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(bufferGasLimitPercentage + 100).div(100));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _estimateGasLimit.apply(this, arguments);\n}\n\nvar isDroppedAndReplaced = function isDroppedAndReplaced(e) {\n  return (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n};\n\nexport function usePromiseTransaction(chainId, options) {\n  var _useState = useState({\n    status: 'None'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useTransactionsConte = useTransactionsContext(),\n      addTransaction = _useTransactionsConte.addTransaction;\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification;\n\n  var resetState = useCallback(function () {\n    setState({\n      status: 'None'\n    });\n  }, [setState]);\n  var promiseTransaction = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transactionPromise) {\n      var _a, _b, _c, _d, _e, _f, transaction, receipt, errorMessage, droppedAndReplaced, status, type;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (chainId) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              transaction = undefined;\n              _context.prev = 3;\n              setState({\n                status: 'PendingSignature',\n                chainId: chainId\n              });\n              _context.next = 7;\n              return transactionPromise;\n\n            case 7:\n              transaction = _context.sent;\n              setState({\n                transaction: transaction,\n                status: 'Mining',\n                chainId: chainId\n              });\n              addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), {\n                  chainId: chainId\n                }),\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n              });\n              _context.next = 12;\n              return transaction.wait();\n\n            case 12:\n              receipt = _context.sent;\n              setState({\n                receipt: receipt,\n                transaction: transaction,\n                status: 'Success',\n                chainId: chainId\n              });\n              return _context.abrupt(\"return\", receipt);\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](3);\n              errorMessage = (_e = (_c = (_b = (_a = _context.t0.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : _context.t0.reason) !== null && _c !== void 0 ? _c : (_d = _context.t0.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : _context.t0.message;\n\n              if (transaction) {\n                droppedAndReplaced = isDroppedAndReplaced(_context.t0);\n\n                if (droppedAndReplaced) {\n                  status = _context.t0.receipt.status === 0 ? 'Fail' : 'Success';\n                  type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                  addNotification({\n                    notification: {\n                      type: type,\n                      submittedAt: Date.now(),\n                      transaction: _context.t0.replacement,\n                      receipt: _context.t0.receipt,\n                      transactionName: (_f = _context.t0.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n                      originalTransaction: transaction\n                    },\n                    chainId: chainId\n                  });\n                  setState({\n                    status: status,\n                    transaction: _context.t0.replacement,\n                    originalTransaction: transaction,\n                    receipt: _context.t0.receipt,\n                    errorMessage: errorMessage,\n                    chainId: chainId\n                  });\n                } else {\n                  setState({\n                    status: 'Fail',\n                    transaction: transaction,\n                    receipt: _context.t0.receipt,\n                    errorMessage: errorMessage,\n                    chainId: chainId\n                  });\n                }\n              } else {\n                setState({\n                  status: 'Exception',\n                  errorMessage: errorMessage,\n                  chainId: chainId\n                });\n              }\n\n              return _context.abrupt(\"return\", undefined);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 17]]);\n    }));\n\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction: promiseTransaction,\n    state: state,\n    resetState: resetState\n  };\n}","map":{"version":3,"mappings":"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","names":["useCallback","useState","useNotificationsContext","useTransactionsContext","BigNumber","errors","estimateGasLimit","transactionRequest","signer","bufferGasLimitPercentage","undefined","gasLimit","from","estimateGas","estimatedGas","mul","div","isDroppedAndReplaced","e","code","TRANSACTION_REPLACED","replacement","reason","cancelled","usePromiseTransaction","chainId","options","status","state","setState","addTransaction","addNotification","resetState","promiseTransaction","transactionPromise","transaction","submittedAt","Date","now","transactionName","wait","receipt","errorMessage","error","_a","message","_b","_c","data","_d","_e","droppedAndReplaced","type","notification","_f","originalTransaction"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\usePromiseTransaction.ts"],"sourcesContent":["import { TransactionRequest, TransactionResponse } from '@ethersproject/abstract-provider'\nimport { useCallback, useState } from 'react'\nimport { useNotificationsContext, useTransactionsContext } from '../providers'\nimport { TransactionStatus, TransactionOptions } from '../../src'\nimport { TransactionState } from '../model'\nimport { BigNumber, errors, Signer } from 'ethers'\n\n/**\n * @internal\n */\nexport async function estimateGasLimit(\n  transactionRequest: TransactionRequest | undefined,\n  signer: Signer | undefined,\n  bufferGasLimitPercentage: number\n) {\n  if (!signer || !transactionRequest) {\n    return undefined\n  }\n  const estimatedGas = transactionRequest.gasLimit\n    ? BigNumber.from(transactionRequest.gasLimit)\n    : await signer.estimateGas(transactionRequest)\n  return estimatedGas?.mul(bufferGasLimitPercentage + 100).div(100)\n}\n\nconst isDroppedAndReplaced = (e: any) =>\n  e?.code === errors.TRANSACTION_REPLACED && e?.replacement && (e?.reason === 'repriced' || e?.cancelled === false)\n\nexport function usePromiseTransaction(chainId: number | undefined, options?: TransactionOptions) {\n  const [state, setState] = useState<TransactionStatus>({ status: 'None' })\n  const { addTransaction } = useTransactionsContext()\n  const { addNotification } = useNotificationsContext()\n\n  const resetState = useCallback(() => {\n    setState({ status: 'None' })\n  }, [setState])\n\n  const promiseTransaction = useCallback(\n    async (transactionPromise: Promise<TransactionResponse>) => {\n      if (!chainId) return\n      let transaction: TransactionResponse | undefined = undefined\n      try {\n        setState({ status: 'PendingSignature', chainId })\n\n        transaction = await transactionPromise\n\n        setState({ transaction, status: 'Mining', chainId })\n        addTransaction({\n          transaction: {\n            ...transaction,\n            chainId: chainId,\n          },\n          submittedAt: Date.now(),\n          transactionName: options?.transactionName,\n        })\n        const receipt = await transaction.wait()\n        setState({ receipt, transaction, status: 'Success', chainId })\n        return receipt\n      } catch (e: any) {\n        const errorMessage = e.error?.message ?? e.reason ?? e.data?.message ?? e.message\n        if (transaction) {\n          const droppedAndReplaced = isDroppedAndReplaced(e)\n\n          if (droppedAndReplaced) {\n            const status: TransactionState = e.receipt.status === 0 ? 'Fail' : 'Success'\n            const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed'\n\n            addNotification({\n              notification: {\n                type,\n                submittedAt: Date.now(),\n                transaction: e.replacement,\n                receipt: e.receipt,\n                transactionName: e.replacement?.transactionName,\n                originalTransaction: transaction,\n              },\n              chainId,\n            })\n\n            setState({\n              status,\n              transaction: e.replacement,\n              originalTransaction: transaction,\n              receipt: e.receipt,\n              errorMessage,\n              chainId,\n            })\n          } else {\n            setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId })\n          }\n        } else {\n          setState({ status: 'Exception', errorMessage, chainId })\n        }\n        return undefined\n      }\n    },\n    [chainId, setState, addTransaction, options]\n  )\n\n  return { promiseTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}