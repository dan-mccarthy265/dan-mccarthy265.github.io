{"ast":null,"code":"import _createForOfIteratorHelper from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\n\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n\n  var timeFromCreation = function timeFromCreation(creationTime) {\n    return Date.now() - creationTime;\n  };\n\n  return notifications.filter(function (notification) {\n    return timeFromCreation(notification.submittedAt) >= expirationPeriod;\n  });\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\n\n\nexport function useNotifications() {\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification,\n      notifications = _useNotificationsCont.notifications,\n      removeNotification = _useNotificationsCont.removeNotification;\n\n  var _useConfig = useConfig(),\n      _useConfig$notificati = _useConfig.notifications,\n      checkInterval = _useConfig$notificati.checkInterval,\n      expirationPeriod = _useConfig$notificati.expirationPeriod;\n\n  var chainNotifications = useMemo(function () {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(function () {\n    if (!chainId) {\n      return;\n    }\n\n    var expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n\n    var _iterator = _createForOfIteratorHelper(expiredNotification),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var notification = _step.value;\n        removeNotification({\n          notificationId: notification.id,\n          chainId: chainId\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification: addNotification,\n    removeNotification: removeNotification\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAAuBC,uBAAvB,QAAsD,cAAtD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAEA,SAASC,uBAAT,CAAiCC,aAAjC,EAAgEC,gBAAhE,EAAwF;EACtF,IAAIA,gBAAgB,KAAK,CAAzB,EAA4B;IAC1B,OAAO,EAAP;EACD;;EACD,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD;IAAA,OAA0BC,IAAI,CAACC,GAAL,KAAaF,YAAvC;EAAA,CAAzB;;EAEA,OAAOH,aAAa,CAACM,MAAd,CAAqB,UAACC,YAAD;IAAA,OAAkBL,gBAAgB,CAACK,YAAY,CAACC,WAAd,CAAhB,IAA8CP,gBAAhE;EAAA,CAArB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAM,SAAUQ,gBAAV,GAA0B;EAC9B,iBAA6Bb,SAAS,EAAtC;EAAA,IAAQc,OAAR,cAAQA,OAAR;EAAA,IAAiBC,OAAjB,cAAiBA,OAAjB;;EACA,4BAA+DhB,uBAAuB,EAAtF;EAAA,IAAQiB,eAAR,yBAAQA,eAAR;EAAA,IAAyBZ,aAAzB,yBAAyBA,aAAzB;EAAA,IAAwCa,kBAAxC,yBAAwCA,kBAAxC;;EACA,iBAEIf,SAAS,EAFb;EAAA,uCACEE,aADF;EAAA,IACmBc,aADnB,yBACmBA,aADnB;EAAA,IACkCb,gBADlC,yBACkCA,gBADlC;;EAIA,IAAMc,kBAAkB,GAAGrB,OAAO,CAAC,YAAK;;;IACtC,IAAIgB,OAAO,KAAKM,SAAZ,IAAyB,CAACL,OAA9B,EAAuC;MACrC,OAAO,EAAP;IACD;;IACD,OAAO,mBAAa,CAACD,OAAD,CAAb,MAAsB,IAAtB,IAAsBO,aAAtB,GAAsBA,EAAtB,GAA0B,EAAjC;EACD,CALiC,EAK/B,CAACjB,aAAD,EAAgBU,OAAhB,EAAyBC,OAAzB,CAL+B,CAAlC;EAOAd,WAAW,CAAC,YAAK;IACf,IAAI,CAACa,OAAL,EAAc;MACZ;IACD;;IAED,IAAMQ,mBAAmB,GAAGnB,uBAAuB,CAACgB,kBAAD,EAAqBd,gBAArB,CAAnD;;IALe,2CAMYiB,mBANZ;IAAA;;IAAA;MAMf,oDAAgD;QAAA,IAArCX,YAAqC;QAC9CM,kBAAkB,CAAC;UAAEM,cAAc,EAAEZ,YAAY,CAACa,EAA/B;UAAmCV,OAAO,EAAPA;QAAnC,CAAD,CAAlB;MACD;IARc;MAAA;IAAA;MAAA;IAAA;EAShB,CATU,EASRI,aATQ,CAAX;EAWA,OAAO;IACLd,aAAa,EAAEe,kBADV;IAELH,eAAe,EAAfA,eAFK;IAGLC,kBAAkB,EAAlBA;EAHK,CAAP;AAKD","names":["useMemo","useNotificationsContext","useEthers","useInterval","useConfig","getExpiredNotifications","notifications","expirationPeriod","timeFromCreation","creationTime","Date","now","filter","notification","submittedAt","useNotifications","chainId","account","addNotification","removeNotification","checkInterval","chainNotifications","undefined","_a","expiredNotification","notificationId","id"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/hooks/useNotifications.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Notification, useNotificationsContext } from '../providers'\nimport { useEthers } from './useEthers'\nimport { useInterval } from './useInterval'\nimport { useConfig } from '../hooks'\n\nfunction getExpiredNotifications(notifications: Notification[], expirationPeriod: number) {\n  if (expirationPeriod === 0) {\n    return []\n  }\n  const timeFromCreation = (creationTime: number) => Date.now() - creationTime\n\n  return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod)\n}\n\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  const { chainId, account } = useEthers()\n  const { addNotification, notifications, removeNotification } = useNotificationsContext()\n  const {\n    notifications: { checkInterval, expirationPeriod },\n  } = useConfig()\n\n  const chainNotifications = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return notifications[chainId] ?? []\n  }, [notifications, chainId, account])\n\n  useInterval(() => {\n    if (!chainId) {\n      return\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod)\n    for (const notification of expiredNotification) {\n      removeNotification({ notificationId: notification.id, chainId })\n    }\n  }, checkInterval)\n\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}