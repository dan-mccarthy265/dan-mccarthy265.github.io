{"ast":null,"code":"import _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider, Provider } from '@ethersproject/providers';\nimport { useConfig } from '../../../hooks';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\n\nvar getProviderFromConfig = function getProviderFromConfig(urlOrProviderOrProviderFunction) {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction;\n  }\n\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction();\n  }\n\n  return new JsonRpcProvider(urlOrProviderOrProviderFunction);\n};\n\nexport var getProvidersFromConfig = function getProvidersFromConfig(readOnlyUrls) {\n  return fromEntries(Object.entries(readOnlyUrls).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        chainId = _ref2[0],\n        urlOrProviderOrProviderFunction = _ref2[1];\n\n    return [chainId, getProviderFromConfig(urlOrProviderOrProviderFunction)];\n  }));\n};\nexport function ReadonlyNetworksProvider(_ref3) {\n  var _ref3$providerOverrid = _ref3.providerOverrides,\n      providerOverrides = _ref3$providerOverrid === void 0 ? {} : _ref3$providerOverrid,\n      children = _ref3.children;\n\n  var _useConfig = useConfig(),\n      _useConfig$readOnlyUr = _useConfig.readOnlyUrls,\n      readOnlyUrls = _useConfig$readOnlyUr === void 0 ? {} : _useConfig$readOnlyUr;\n\n  var _useState = useState(function () {\n    return Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      providers = _useState2[0],\n      setProviders = _useState2[1];\n\n  useEffect(function () {\n    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  }, Object.entries(readOnlyUrls).flat());\n  return _jsx(ReadonlyNetworksContext.Provider, Object.assign({\n    value: providers\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAAwD,0BAAxD;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,SAASC,uBAAT,QAAwC,WAAxC;AAEA,SAASC,WAAT,QAA4B,8BAA5B;;AAOA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,+BAAD,EAAiF;EAC7G,IAAIL,QAAQ,CAACM,UAAT,CAAoBD,+BAApB,CAAJ,EAA0D;IACxD,OAAOA,+BAAP;EACD;;EACD,IAAI,OAAOA,+BAAP,KAA2C,UAA/C,EAA2D;IACzD,OAAOA,+BAA+B,EAAtC;EACD;;EACD,OAAO,IAAIN,eAAJ,CAAoBM,+BAApB,CAAP;AACD,CARD;;AAUA,OAAO,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,YAAD;EAAA,OACpCL,WAAW,CACTM,MAAM,CAACC,OAAP,CAAeF,YAAf,EAA6BG,GAA7B,CAAiC;IAAA;IAAA,IAAEC,OAAF;IAAA,IAAWP,+BAAX;;IAAA,OAAgD,CAC/EO,OAD+E,EAE/ER,qBAAqB,CAACC,+BAAD,CAF0D,CAAhD;EAAA,CAAjC,CADS,CADyB;AAAA,CAA/B;AAQP,OAAM,SAAUQ,wBAAV,QAA6F;EAAA,kCAAxDC,iBAAwD;EAAA,IAAxDA,iBAAwD,sCAApC,EAAoC;EAAA,IAAhCC,QAAgC,SAAhCA,QAAgC;;EACjG,iBAA8Bd,SAAS,EAAvC;EAAA,uCAAQO,YAAR;EAAA,IAAQA,YAAR,sCAAuB,EAAvB;;EACA,gBAAkCV,QAAQ,CAAY;IAAA,OAAMW,gCACvDF,sBAAsB,CAACC,YAAD,CADiC,GAEvDM,iBAFuD,CAAN;EAAA,CAAZ,CAA1C;EAAA;EAAA,IAAOE,SAAP;EAAA,IAAkBC,YAAlB;;EAKApB,SAAS,CAAC,YAAK;IACboB,YAAY,iCAAMV,sBAAsB,CAACC,YAAD,CAA5B,GAA+CM,iBAA/C,EAAZ;EACD,CAFQ,EAENL,MAAM,CAACC,OAAP,CAAeF,YAAf,EAA6BU,IAA7B,EAFM,CAAT;EAIA,OAAOC,KAACjB,uBAAuB,CAACF,QAAzB,EAAiCS;IAACW,KAAK,EAAEJ;EAAR,GAAiB;IAAAD,UAAGA;EAAH,CAAjB,CAAjC,CAAP;AACD","names":["useEffect","useState","JsonRpcProvider","Provider","useConfig","ReadonlyNetworksContext","fromEntries","getProviderFromConfig","urlOrProviderOrProviderFunction","isProvider","getProvidersFromConfig","readOnlyUrls","Object","entries","map","chainId","ReadonlyNetworksProvider","providerOverrides","children","providers","setProviders","flat","_jsx","value"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\network\\readonlyNetworks\\provider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useState } from 'react'\nimport { JsonRpcProvider, Provider, BaseProvider } from '@ethersproject/providers'\nimport { useConfig } from '../../../hooks'\nimport { Providers } from './model'\nimport { ReadonlyNetworksContext } from './context'\nimport { BaseProviderFactory, NodeUrls } from '../../../constants'\nimport { fromEntries } from '../../../helpers/fromEntries'\n\ninterface NetworkProviderProps {\n  providerOverrides?: Providers\n  children?: ReactNode\n}\n\nconst getProviderFromConfig = (urlOrProviderOrProviderFunction: string | BaseProvider | BaseProviderFactory) => {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction\n  }\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction()\n  }\n  return new JsonRpcProvider(urlOrProviderOrProviderFunction)\n}\n\nexport const getProvidersFromConfig = (readOnlyUrls: NodeUrls) =>\n  fromEntries(\n    Object.entries(readOnlyUrls).map(([chainId, urlOrProviderOrProviderFunction]) => [\n      chainId,\n      getProviderFromConfig(urlOrProviderOrProviderFunction),\n    ])\n  )\n\nexport function ReadonlyNetworksProvider({ providerOverrides = {}, children }: NetworkProviderProps) {\n  const { readOnlyUrls = {} } = useConfig()\n  const [providers, setProviders] = useState<Providers>(() => ({\n    ...getProvidersFromConfig(readOnlyUrls),\n    ...providerOverrides,\n  }))\n\n  useEffect(() => {\n    setProviders({ ...getProvidersFromConfig(readOnlyUrls), ...providerOverrides })\n  }, Object.entries(readOnlyUrls).flat())\n\n  return <ReadonlyNetworksContext.Provider value={providers}>{children}</ReadonlyNetworksContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}