{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\n\nexport function useTransactions() {\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useEthers = useEthers(),\n      defaultChainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  var _useTransactionsConte = useTransactionsContext(),\n      addTransaction = _useTransactionsConte.addTransaction,\n      transactions = _useTransactionsConte.transactions;\n\n  var _chainId = queryParams.chainId;\n  var chainId = useMemo(function () {\n    return _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId;\n  }, [_chainId, defaultChainId]);\n  var filtered = useMemo(function () {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter(function (x) {\n      return x.transaction.from === account;\n    });\n  }, [transactions, chainId, account]);\n  return {\n    transactions: filtered,\n    addTransaction: addTransaction\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,sBAAT,QAAuC,cAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,eAAV,GAAuD;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;EAC3D,iBAA6CF,SAAS,EAAtD;EAAA,IAAiBG,cAAjB,cAAQC,OAAR;EAAA,IAAiCC,OAAjC,cAAiCA,OAAjC;;EACA,4BAAyCN,sBAAsB,EAA/D;EAAA,IAAQO,cAAR,yBAAQA,cAAR;EAAA,IAAwBC,YAAxB,yBAAwBA,YAAxB;;EACA,IAAiBC,QAAjB,GAA8BN,WAA9B,CAAQE,OAAR;EAEA,IAAMA,OAAO,GAAGN,OAAO,CAAC;IAAA,OAAMU,QAAQ,SAAR,YAAQ,WAAR,cAAYL,cAAlB;EAAA,CAAD,EAAmC,CAACK,QAAD,EAAWL,cAAX,CAAnC,CAAvB;EAEA,IAAMM,QAAQ,GAAGX,OAAO,CAAC,YAAK;;;IAC5B,IAAIM,OAAO,KAAKM,SAAZ,IAAyB,CAACL,OAA9B,EAAuC;MACrC,OAAO,EAAP;IACD;;IACD,OAAO,CAAC,kBAAY,CAACD,OAAD,CAAZ,MAAqB,IAArB,IAAqBO,aAArB,GAAqBA,EAArB,GAAyB,EAA1B,EAA8BC,MAA9B,CAAqC,UAACC,CAAD;MAAA,OAAOA,CAAC,CAACC,WAAF,CAAcC,IAAd,KAAuBV,OAA9B;IAAA,CAArC,CAAP;EACD,CALuB,EAKrB,CAACE,YAAD,EAAeH,OAAf,EAAwBC,OAAxB,CALqB,CAAxB;EAOA,OAAO;IACLE,YAAY,EAAEE,QADT;IAELH,cAAc,EAAdA;EAFK,CAAP;AAID","names":["useMemo","useTransactionsContext","useEthers","useTransactions","queryParams","defaultChainId","chainId","account","addTransaction","transactions","_chainId","filtered","undefined","_a","filter","x","transaction","from"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useTransactions.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useTransactionsContext } from '../providers'\nimport { useEthers } from './useEthers'\n\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\nexport function useTransactions(queryParams: QueryParams = {}) {\n  const { chainId: defaultChainId, account } = useEthers()\n  const { addTransaction, transactions } = useTransactionsContext()\n  const { chainId: _chainId } = queryParams\n\n  const chainId = useMemo(() => _chainId ?? defaultChainId, [_chainId, defaultChainId])\n\n  const filtered = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return (transactions[chainId] ?? []).filter((x) => x.transaction.from === account)\n  }, [transactions, chainId, account])\n\n  return {\n    transactions: filtered,\n    addTransaction,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}