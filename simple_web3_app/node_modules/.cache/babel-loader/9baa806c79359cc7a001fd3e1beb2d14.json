{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * @public\n */\n\nexport function useRawLogs(filter) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library;\n\n  var providers = useReadonlyNetworks();\n\n  var _blockNumber = useBlockNumber();\n\n  var blockNumbers = useBlockNumbers();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      logs = _useState2[0],\n      setLogs = _useState2[1];\n\n  var chainId = queryParams.chainId;\n\n  var _useMemo = useMemo(function () {\n    return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n  }, [providers, library, blockNumbers, _blockNumber, chainId]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      provider = _useMemo2[0],\n      blockNumber = _useMemo2[1];\n\n  function updateLogs() {\n    return _updateLogs.apply(this, arguments);\n  }\n\n  function _updateLogs() {\n    _updateLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setLogs;\n\n              if (filter) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.t1 = undefined;\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return provider === null || provider === void 0 ? void 0 : provider.getLogs(filter);\n\n            case 7:\n              _context.t1 = _context.sent;\n\n            case 8:\n              _context.t2 = _context.t1;\n              (0, _context.t0)(_context.t2);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updateLogs.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    void updateLogs();\n  }, [provider, blockNumber]);\n  return logs;\n}","map":{"version":3,"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,uCAApC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,UAAhD;AAKA;;;;AAGA,OAAM,SAAUC,UAAV,CACJC,MADI,EAEyB;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;EAE7B,iBAAoBN,SAAS,EAA7B;EAAA,IAAQO,OAAR,cAAQA,OAAR;;EACA,IAAMC,SAAS,GAAGP,mBAAmB,EAArC;;EACA,IAAMQ,YAAY,GAAGN,cAAc,EAAnC;;EACA,IAAMO,YAAY,GAAGR,eAAe,EAApC;;EAEA,gBAAwBH,QAAQ,EAAhC;EAAA;EAAA,IAAOY,IAAP;EAAA,IAAaC,OAAb;;EAEA,IAAQC,OAAR,GAAoBP,WAApB,CAAQO,OAAR;;EAEA,eAAgCf,OAAO,CACrC;IAAA,OAAOe,OAAO,GAAG,CAACL,SAAS,CAACK,OAAD,CAAV,EAAqBH,YAAY,CAACG,OAAD,CAAjC,CAAH,GAAiD,CAACN,OAAD,EAAUE,YAAV,CAA/D;EAAA,CADqC,EAErC,CAACD,SAAD,EAAYD,OAAZ,EAAqBG,YAArB,EAAmCD,YAAnC,EAAiDI,OAAjD,CAFqC,CAAvC;EAAA;EAAA,IAAOC,QAAP;EAAA,IAAiBC,WAAjB;;EAX6B,SAgBdC,UAhBc;IAAA;EAAA;;EAAA;IAAA,yEAgB7B;MAAA;QAAA;UAAA;YAAA;cAAA,cACEJ,OADF;;cAAA,IACWP,MADX;gBAAA;gBAAA;cAAA;;cAAA,cACoBY,SADpB;cAAA;cAAA;;YAAA;cAAA;cAAA,OACsCH,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEI,OAAV,CAAkBb,MAAlB,CADtC;;YAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAhB6B;IAAA;EAAA;;EAoB7BR,SAAS,CAAC,YAAK;IACb,KAAKmB,UAAU,EAAf;EACD,CAFQ,EAEN,CAACF,QAAD,EAAWC,WAAX,CAFM,CAAT;EAIA,OAAOJ,IAAP;AACD","names":["useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumbers","useBlockNumber","useRawLogs","filter","queryParams","library","providers","_blockNumber","blockNumbers","logs","setLogs","chainId","provider","blockNumber","updateLogs","undefined","getLogs"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/hooks/useRawLogs.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\nimport { useBlockNumbers, useBlockNumber } from '../hooks'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { Filter, FilterByBlockHash, Log } from '@ethersproject/abstract-provider'\nimport { Falsy } from '../model/types'\n\n/**\n * @public\n */\nexport function useRawLogs(\n  filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash> | Falsy,\n  queryParams: QueryParams = {}\n): Log[] | undefined {\n  const { library } = useEthers()\n  const providers = useReadonlyNetworks()\n  const _blockNumber = useBlockNumber()\n  const blockNumbers = useBlockNumbers()\n\n  const [logs, setLogs] = useState<Log[] | undefined>()\n\n  const { chainId } = queryParams\n\n  const [provider, blockNumber] = useMemo(\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\n    [providers, library, blockNumbers, _blockNumber, chainId]\n  )\n\n  async function updateLogs() {\n    setLogs(!filter ? undefined : await provider?.getLogs(filter))\n  }\n\n  useEffect(() => {\n    void updateLogs()\n  }, [provider, blockNumber])\n\n  return logs\n}\n"]},"metadata":{},"sourceType":"module"}