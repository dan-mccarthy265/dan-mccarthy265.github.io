{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\n\nexport function useEthers() {\n  var _useNetwork = useNetwork(),\n      _useNetwork$network = _useNetwork.network,\n      networkProvider = _useNetwork$network.provider,\n      chainId = _useNetwork$network.chainId,\n      accounts = _useNetwork$network.accounts,\n      errors = _useNetwork$network.errors,\n      deactivate = _useNetwork.deactivate,\n      _activate = _useNetwork.activate,\n      activateBrowserWallet = _useNetwork.activateBrowserWallet,\n      isLoading = _useNetwork.isLoading;\n\n  var _useConfig = useConfig(),\n      networks = _useConfig.networks;\n\n  var supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map(function (network) {\n    return network.chainId;\n  });\n  var isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n  var unsupportedChainIdError = new Error(\"Unsupported chain id: \".concat(chainId, \". Supported chain ids are: \").concat(supportedChainIds, \".\"));\n  unsupportedChainIdError.name = 'UnsupportedChainIdError';\n  var error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1];\n  var readonlyNetwork = useReadonlyNetwork();\n  var provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n\n  var switchNetwork = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(chainId) {\n      var errChainNotAddedYet, chain;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              validateArguments({\n                chainId: chainId\n              }, {\n                chainId: 'number'\n              });\n\n              if (provider) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Provider not connected.');\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return provider.send('wallet_switchEthereumChain', [{\n                chainId: \"0x\".concat(chainId.toString(16))\n              }]);\n\n            case 6:\n              _context.next = 16;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](3);\n              errChainNotAddedYet = 4902; // Metamask error code\n\n              if (!(_context.t0.code === errChainNotAddedYet)) {\n                _context.next = 16;\n                break;\n              }\n\n              chain = networks === null || networks === void 0 ? void 0 : networks.find(function (chain) {\n                return chain.chainId === chainId;\n              });\n\n              if (!(chain === null || chain === void 0 ? void 0 : chain.rpcUrl)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 16;\n              return provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 8]]);\n    }));\n\n    return function switchNetwork(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var account = accounts[0] ? getAddress(accounts[0]) : undefined;\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: isUnsupportedChainId ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n    account: account,\n    active: !!provider,\n    activate: function () {\n      var _activate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(providerOrConnector) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!('getProvider' in providerOrConnector)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n                _context2.next = 4;\n                return providerOrConnector.activate();\n\n              case 4:\n                _context2.t0 = _activate;\n                _context2.next = 7;\n                return providerOrConnector.getProvider();\n\n              case 7:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1));\n\n              case 9:\n                return _context2.abrupt(\"return\", _activate(providerOrConnector));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function activate(_x2) {\n        return _activate2.apply(this, arguments);\n      }\n\n      return activate;\n    }(),\n    activateBrowserWallet: activateBrowserWallet,\n    deactivate: deactivate,\n    setError: function setError() {\n      throw new Error('setError is deprecated');\n    },\n    error: error,\n    isLoading: isLoading,\n    switchNetwork: switchNetwork\n  };\n}","map":{"version":3,"mappings":"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","names":["getAddress","getAddNetworkParams","validateArguments","useNetwork","useConfig","useReadonlyNetwork","useEthers","network","networkProvider","provider","chainId","accounts","errors","deactivate","activate","activateBrowserWallet","isLoading","networks","supportedChainIds","map","isUnsupportedChainId","indexOf","unsupportedChainIdError","Error","name","error","length","readonlyNetwork","switchNetwork","send","toString","errChainNotAddedYet","code","chain","find","rpcUrl","account","undefined","connector","library","active","providerOrConnector","console","warn","getProvider","setError"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/hooks/useEthers.ts"],"sourcesContent":["import { ExternalProvider, JsonRpcProvider } from '@ethersproject/providers'\nimport { getAddress } from 'ethers/lib/utils'\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams'\nimport { validateArguments } from '../helpers/validateArgument'\nimport { useNetwork } from '../providers'\nimport { useConfig } from '../hooks'\nimport { useReadonlyNetwork } from './useReadonlyProvider'\n\ntype MaybePromise<T> = Promise<T> | any\n\ntype SupportedProviders =\n  | JsonRpcProvider\n  | ExternalProvider\n  | { getProvider: () => MaybePromise<JsonRpcProvider | ExternalProvider>; activate: () => Promise<any> }\n\n/**\n * @public\n */\nexport type Web3Ethers = {\n  activate: (provider: SupportedProviders) => Promise<void>\n  /**\n   * @deprecated\n   */\n  setError: (error: Error) => void\n  deactivate: () => void\n  connector: undefined\n  chainId?: number\n  account?: string\n  error?: Error\n  library?: JsonRpcProvider\n  active: boolean\n  activateBrowserWallet: () => void\n  isLoading: boolean\n  /**\n   * Switch to a different network.\n   */\n  switchNetwork: (chainId: number) => void\n}\n\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n * \n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers(): Web3Ethers {\n  const {\n    network: { provider: networkProvider, chainId, accounts, errors },\n    deactivate,\n    activate,\n    activateBrowserWallet,\n    isLoading,\n  } = useNetwork()\n\n  const { networks } = useConfig()\n  const supportedChainIds = networks?.map((network) => network.chainId)\n  const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0\n  const unsupportedChainIdError = new Error(\n    `Unsupported chain id: ${chainId}. Supported chain ids are: ${supportedChainIds}.`\n  )\n  unsupportedChainIdError.name = 'UnsupportedChainIdError'\n  const error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1]\n\n  const readonlyNetwork = useReadonlyNetwork()\n  const provider = networkProvider ?? (readonlyNetwork?.provider as JsonRpcProvider)\n\n  const switchNetwork = async (chainId: number) => {\n    validateArguments({ chainId }, { chainId: 'number' })\n\n    if (!provider) {\n      throw new Error('Provider not connected.')\n    }\n\n    try {\n      await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }])\n    } catch (error: any) {\n      const errChainNotAddedYet = 4902 // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = networks?.find((chain) => chain.chainId === chainId)\n        if (chain?.rpcUrl) {\n          await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)])\n        }\n      }\n    }\n  }\n\n  const account = accounts[0] ? getAddress(accounts[0]) : undefined\n\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: isUnsupportedChainId ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork?.chainId,\n    account,\n    active: !!provider,\n    activate: async (providerOrConnector: SupportedProviders) => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.')\n        await providerOrConnector.activate()\n        return activate(await providerOrConnector.getProvider())\n      }\n      return activate(providerOrConnector)\n    },\n    activateBrowserWallet,\n    deactivate,\n\n    setError: () => {\n      throw new Error('setError is deprecated')\n    },\n\n    error,\n    isLoading,\n\n    switchNetwork,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}