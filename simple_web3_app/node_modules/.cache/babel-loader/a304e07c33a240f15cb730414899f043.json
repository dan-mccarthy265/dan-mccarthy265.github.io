{"ast":null,"code":"import { notifyDevtools } from '../../devtools';\nexport function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {\n  const start = Date.now();\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls).then(state => {\n    dispatchState({\n      type: 'FETCH_SUCCESS',\n      blockNumber,\n      chainId,\n      state\n    });\n    notifyDevtools({\n      type: 'MULTICALL_SUCCESS',\n      duration: Date.now() - start,\n      chainId,\n      blockNumber,\n      multicallAddress,\n      state\n    });\n  }).catch(error => {\n    reportError(error);\n    dispatchState({\n      type: 'FETCH_ERROR',\n      blockNumber,\n      chainId,\n      error\n    });\n    notifyDevtools({\n      type: 'MULTICALL_ERROR',\n      duration: Date.now() - start,\n      chainId,\n      blockNumber,\n      multicallAddress,\n      calls: uniqueCalls,\n      error\n    });\n  });\n}","map":{"version":3,"mappings":"AAKA,SAASA,cAAT,QAA+B,gBAA/B;AAEA,OAAM,SAAUC,gBAAV,CACJC,QADI,EAEJC,iBAFI,EAQJC,gBARI,EASJC,WATI,EAUJC,WAVI,EAWJC,aAXI,EAYJC,OAZI,EAaJC,WAbI,EAa+B;EAEnC,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;EACAT,iBAAiB,CAACD,QAAD,EAAWE,gBAAX,EAA6BC,WAA7B,EAA0CC,WAA1C,CAAjB,CACGO,IADH,CACSC,KAAD,IAAU;IACdP,aAAa,CAAC;MAAEQ,IAAI,EAAE,eAAR;MAAyBV,WAAzB;MAAsCG,OAAtC;MAA+CM;IAA/C,CAAD,CAAb;IACAd,cAAc,CAAC;MACbe,IAAI,EAAE,mBADO;MAEbC,QAAQ,EAAEL,IAAI,CAACC,GAAL,KAAaF,KAFV;MAGbF,OAHa;MAIbH,WAJa;MAKbD,gBALa;MAMbU;IANa,CAAD,CAAd;EAQD,CAXH,EAYGG,KAZH,CAYUC,KAAD,IAAU;IACfT,WAAW,CAACS,KAAD,CAAX;IACAX,aAAa,CAAC;MAAEQ,IAAI,EAAE,aAAR;MAAuBV,WAAvB;MAAoCG,OAApC;MAA6CU;IAA7C,CAAD,CAAb;IACAlB,cAAc,CAAC;MACbe,IAAI,EAAE,iBADO;MAEbC,QAAQ,EAAEL,IAAI,CAACC,GAAL,KAAaF,KAFV;MAGbF,OAHa;MAIbH,WAJa;MAKbD,gBALa;MAMbe,KAAK,EAAEb,WANM;MAObY;IAPa,CAAD,CAAd;EASD,CAxBH;AAyBD","names":["notifyDevtools","performMulticall","provider","multicallExecutor","multicallAddress","blockNumber","uniqueCalls","dispatchState","chainId","reportError","start","Date","now","then","state","type","duration","catch","error","calls"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\performMulticall.ts"],"sourcesContent":["import { BaseProvider } from '@ethersproject/providers'\nimport { RawCall } from './callsReducer'\nimport { Dispatch } from 'react'\nimport { ChainStateAction } from './chainStateReducer'\nimport { ChainId } from '../../../constants'\nimport { notifyDevtools } from '../../devtools'\n\nexport function performMulticall(\n  provider: BaseProvider,\n  multicallExecutor: (\n    provider: BaseProvider,\n    multicallAddress: string,\n    blockNumber: number,\n    uniqueCalls: RawCall[]\n  ) => Promise<any>,\n  multicallAddress: string,\n  blockNumber: number,\n  uniqueCalls: RawCall[],\n  dispatchState: Dispatch<ChainStateAction>,\n  chainId: ChainId,\n  reportError: (error: Error) => void\n) {\n  const start = Date.now()\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls)\n    .then((state) => {\n      dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state })\n      notifyDevtools({\n        type: 'MULTICALL_SUCCESS',\n        duration: Date.now() - start,\n        chainId,\n        blockNumber,\n        multicallAddress,\n        state,\n      })\n    })\n    .catch((error) => {\n      reportError(error)\n      dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error })\n      notifyDevtools({\n        type: 'MULTICALL_ERROR',\n        duration: Date.now() - start,\n        chainId,\n        blockNumber,\n        multicallAddress,\n        calls: uniqueCalls,\n        error,\n      })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}