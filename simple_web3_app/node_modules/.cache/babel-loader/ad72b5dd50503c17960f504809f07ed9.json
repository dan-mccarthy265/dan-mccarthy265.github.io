{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers, useLocalStorage, useBlockNumber, useConfig } from '../../hooks';\nimport { useNotificationsContext } from '../notifications/context';\nimport { TransactionsContext } from './context';\nimport { DEFAULT_STORED_TRANSACTIONS } from './model';\nimport { transactionReducer } from './reducer';\nexport function TransactionProvider(_ref) {\n  var children = _ref.children;\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      library = _useEthers.library;\n\n  var blockNumber = useBlockNumber();\n\n  var _useConfig = useConfig(),\n      localStorage = _useConfig.localStorage;\n\n  var _useLocalStorage = useLocalStorage(localStorage.transactionPath),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      storage = _useLocalStorage2[0],\n      setStorage = _useLocalStorage2[1];\n\n  var _useReducer = useReducer(transactionReducer, storage !== null && storage !== void 0 ? storage : DEFAULT_STORED_TRANSACTIONS),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      transactions = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification;\n\n  useEffect(function () {\n    setStorage(transactions);\n  }, [transactions]);\n  var addTransaction = useCallback(function (payload) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: payload\n    });\n    addNotification({\n      notification: {\n        type: 'transactionStarted',\n        transaction: payload.transaction,\n        submittedAt: payload.submittedAt,\n        transactionName: payload.transactionName\n      },\n      chainId: payload.transaction.chainId\n    });\n  }, [dispatch]);\n  useEffect(function () {\n    var updateTransactions = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a, checkTransaction, chainTransactions, newTransactions, _iterator, _step, tx, newTransaction;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!chainId || !library || !blockNumber)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                checkTransaction = /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tx) {\n                    var receipt, type;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!(tx.receipt || !shouldCheck(blockNumber, tx))) {\n                              _context.next = 2;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", tx);\n\n                          case 2:\n                            _context.prev = 2;\n                            _context.next = 5;\n                            return library.getTransactionReceipt(tx.transaction.hash);\n\n                          case 5:\n                            receipt = _context.sent;\n\n                            if (!receipt) {\n                              _context.next = 12;\n                              break;\n                            }\n\n                            type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed';\n                            addNotification({\n                              notification: {\n                                type: type,\n                                submittedAt: Date.now(),\n                                transaction: tx.transaction,\n                                receipt: receipt,\n                                transactionName: tx.transactionName\n                              },\n                              chainId: chainId\n                            });\n                            return _context.abrupt(\"return\", Object.assign(Object.assign({}, tx), {\n                              receipt: receipt\n                            }));\n\n                          case 12:\n                            return _context.abrupt(\"return\", Object.assign(Object.assign({}, tx), {\n                              lastCheckedBlockNumber: blockNumber\n                            }));\n\n                          case 13:\n                            _context.next = 18;\n                            break;\n\n                          case 15:\n                            _context.prev = 15;\n                            _context.t0 = _context[\"catch\"](2);\n                            console.error(\"failed to check transaction hash: \".concat(tx.transaction.hash), _context.t0);\n\n                          case 18:\n                            return _context.abrupt(\"return\", tx);\n\n                          case 19:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[2, 15]]);\n                  }));\n\n                  return function checkTransaction(_x) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }();\n\n                chainTransactions = (_a = transactions[chainId]) !== null && _a !== void 0 ? _a : [];\n                newTransactions = [];\n                _iterator = _createForOfIteratorHelper(chainTransactions);\n                _context2.prev = 6;\n\n                _iterator.s();\n\n              case 8:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                tx = _step.value;\n                _context2.next = 12;\n                return checkTransaction(tx);\n\n              case 12:\n                newTransaction = _context2.sent;\n                newTransactions.push(newTransaction);\n\n              case 14:\n                _context2.next = 8;\n                break;\n\n              case 16:\n                _context2.next = 21;\n                break;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.t0 = _context2[\"catch\"](6);\n\n                _iterator.e(_context2.t0);\n\n              case 21:\n                _context2.prev = 21;\n\n                _iterator.f();\n\n                return _context2.finish(21);\n\n              case 24:\n                dispatch({\n                  type: 'UPDATE_TRANSACTIONS',\n                  chainId: chainId,\n                  transactions: newTransactions\n                });\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[6, 18, 21, 24]]);\n      }));\n\n      return function updateTransactions() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    void updateTransactions();\n  }, [chainId, library, blockNumber]);\n  return _jsx(TransactionsContext.Provider, {\n    value: {\n      transactions: transactions,\n      addTransaction: addTransaction\n    },\n    children: children\n  });\n}\n\nfunction shouldCheck(blockNumber, tx) {\n  if (tx.receipt) {\n    return false;\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    return true;\n  }\n\n  var blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber;\n\n  if (blocksSinceCheck < 1) {\n    return false;\n  }\n\n  var minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } // otherwise every block\n\n\n  return true;\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useReducer","useEthers","useLocalStorage","useBlockNumber","useConfig","useNotificationsContext","TransactionsContext","DEFAULT_STORED_TRANSACTIONS","transactionReducer","TransactionProvider","children","chainId","library","blockNumber","localStorage","transactionPath","storage","setStorage","transactions","dispatch","addNotification","addTransaction","payload","type","notification","transaction","submittedAt","transactionName","updateTransactions","checkTransaction","tx","receipt","shouldCheck","getTransactionReceipt","hash","status","Date","now","Object","lastCheckedBlockNumber","console","error","chainTransactions","_a","newTransactions","newTransaction","push","_jsx","Provider","value","blocksSinceCheck","minutesPending"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\transactions\\provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers, useLocalStorage, useBlockNumber, useConfig } from '../../hooks'\nimport { useNotificationsContext } from '../notifications/context'\nimport { TransactionsContext } from './context'\nimport { DEFAULT_STORED_TRANSACTIONS, StoredTransaction } from './model'\nimport { transactionReducer } from './reducer'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function TransactionProvider({ children }: Props) {\n  const { chainId, library } = useEthers()\n  const blockNumber = useBlockNumber()\n  const { localStorage } = useConfig()\n  const [storage, setStorage] = useLocalStorage(localStorage.transactionPath)\n  const [transactions, dispatch] = useReducer(transactionReducer, storage ?? DEFAULT_STORED_TRANSACTIONS)\n  const { addNotification } = useNotificationsContext()\n\n  useEffect(() => {\n    setStorage(transactions)\n  }, [transactions])\n\n  const addTransaction = useCallback(\n    (payload: StoredTransaction) => {\n      dispatch({\n        type: 'ADD_TRANSACTION',\n        payload,\n      })\n      addNotification({\n        notification: {\n          type: 'transactionStarted',\n          transaction: payload.transaction,\n          submittedAt: payload.submittedAt,\n          transactionName: payload.transactionName,\n        },\n        chainId: payload.transaction.chainId,\n      })\n    },\n    [dispatch]\n  )\n\n  useEffect(() => {\n    const updateTransactions = async () => {\n      if (!chainId || !library || !blockNumber) {\n        return\n      }\n\n      const checkTransaction = async (tx: StoredTransaction) => {\n        if (tx.receipt || !shouldCheck(blockNumber, tx)) {\n          return tx\n        }\n\n        try {\n          const receipt = await library.getTransactionReceipt(tx.transaction.hash)\n          if (receipt) {\n            const type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed'\n            addNotification({\n              notification: {\n                type,\n                submittedAt: Date.now(),\n                transaction: tx.transaction,\n                receipt,\n                transactionName: tx.transactionName,\n              },\n              chainId,\n            })\n\n            return { ...tx, receipt }\n          } else {\n            return { ...tx, lastCheckedBlockNumber: blockNumber }\n          }\n        } catch (error) {\n          console.error(`failed to check transaction hash: ${tx.transaction.hash}`, error)\n        }\n\n        return tx\n      }\n\n      const chainTransactions = transactions[chainId] ?? []\n      const newTransactions: StoredTransaction[] = []\n      for (const tx of chainTransactions) {\n        const newTransaction = await checkTransaction(tx)\n        newTransactions.push(newTransaction)\n      }\n\n      dispatch({ type: 'UPDATE_TRANSACTIONS', chainId, transactions: newTransactions })\n    }\n\n    void updateTransactions()\n  }, [chainId, library, blockNumber])\n\n  return <TransactionsContext.Provider value={{ transactions, addTransaction }} children={children} />\n}\n\nfunction shouldCheck(blockNumber: number, tx: StoredTransaction): boolean {\n  if (tx.receipt) {\n    return false\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    return true\n  }\n\n  const blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) {\n    return false\n  }\n\n  const minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  }\n\n  // otherwise every block\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}