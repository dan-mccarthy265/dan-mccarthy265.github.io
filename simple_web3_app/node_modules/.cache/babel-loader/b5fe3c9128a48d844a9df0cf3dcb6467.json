{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\n\nexport function useGasPrice() {\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library;\n\n  var providers = useReadonlyNetworks();\n\n  var _blockNumber = useBlockNumber();\n\n  var blockNumbers = useBlockNumbers();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      gasPrice = _useState2[0],\n      setGasPrice = _useState2[1];\n\n  var chainId = queryParams.chainId;\n\n  var _useMemo = useMemo(function () {\n    return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n  }, [providers, library, blockNumbers, _blockNumber]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      provider = _useMemo2[0],\n      blockNumber = _useMemo2[1];\n\n  function updateGasPrice() {\n    return _updateGasPrice.apply(this, arguments);\n  }\n\n  function _updateGasPrice() {\n    _updateGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setGasPrice;\n              _context.next = 3;\n              return provider === null || provider === void 0 ? void 0 : provider.getGasPrice();\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updateGasPrice.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    void updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"mappings":";;;AACA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,uCAApC;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,UAAhD;AAGA;;;;;;AAKA,OAAM,SAAUC,WAAV,GAAmD;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;EACvD,iBAAoBL,SAAS,EAA7B;EAAA,IAAQM,OAAR,cAAQA,OAAR;;EACA,IAAMC,SAAS,GAAGN,mBAAmB,EAArC;;EACA,IAAMO,YAAY,GAAGN,cAAc,EAAnC;;EACA,IAAMO,YAAY,GAAGN,eAAe,EAApC;;EAEA,gBAAgCJ,QAAQ,EAAxC;EAAA;EAAA,IAAOW,QAAP;EAAA,IAAiBC,WAAjB;;EAEA,IAAQC,OAAR,GAAoBP,WAApB,CAAQO,OAAR;;EAEA,eAAgCd,OAAO,CACrC;IAAA,OAAOc,OAAO,GAAG,CAACL,SAAS,CAACK,OAAD,CAAV,EAAqBH,YAAY,CAACG,OAAD,CAAjC,CAAH,GAAiD,CAACN,OAAD,EAAUE,YAAV,CAA/D;EAAA,CADqC,EAErC,CAACD,SAAD,EAAYD,OAAZ,EAAqBG,YAArB,EAAmCD,YAAnC,CAFqC,CAAvC;EAAA;EAAA,IAAOK,QAAP;EAAA,IAAiBC,WAAjB;;EAVuD,SAexCC,cAfwC;IAAA;EAAA;;EAAA;IAAA,6EAevD;MAAA;QAAA;UAAA;YAAA;cAAA,cACEJ,WADF;cAAA;cAAA,OACoBE,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEG,WAAV,EADpB;;YAAA;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAfuD;IAAA;EAAA;;EAmBvDnB,SAAS,CAAC,YAAK;IACb,KAAKkB,cAAc,EAAnB;EACD,CAFQ,EAEN,CAACF,QAAD,EAAWC,WAAX,CAFM,CAAT;EAIA,OAAOJ,QAAP;AACD","names":["useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumber","useBlockNumbers","useGasPrice","queryParams","library","providers","_blockNumber","blockNumbers","gasPrice","setGasPrice","chainId","provider","blockNumber","updateGasPrice","getGasPrice"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useGasPrice.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\nimport { useBlockNumber, useBlockNumbers } from '../hooks'\nimport { QueryParams } from '../constants/type/QueryParams'\n\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice(queryParams: QueryParams = {}): BigNumber | undefined {\n  const { library } = useEthers()\n  const providers = useReadonlyNetworks()\n  const _blockNumber = useBlockNumber()\n  const blockNumbers = useBlockNumbers()\n\n  const [gasPrice, setGasPrice] = useState<BigNumber | undefined>()\n\n  const { chainId } = queryParams\n\n  const [provider, blockNumber] = useMemo(\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\n    [providers, library, blockNumbers, _blockNumber]\n  )\n\n  async function updateGasPrice() {\n    setGasPrice(await provider?.getGasPrice())\n  }\n\n  useEffect(() => {\n    void updateGasPrice()\n  }, [provider, blockNumber])\n\n  return gasPrice\n}\n"]},"metadata":{},"sourceType":"module"}