{"ast":null,"code":"import _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      notifications = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  useEffect(function () {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  var addNotification = useCallback(function (_ref2) {\n    var notification = _ref2.notification,\n        chainId = _ref2.chainId;\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      chainId: chainId,\n      notification: Object.assign(Object.assign({}, notification), {\n        id: nanoid()\n      })\n    });\n  }, [dispatch]);\n  var removeNotification = useCallback(function (_ref3) {\n    var notificationId = _ref3.notificationId,\n        chainId = _ref3.chainId;\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      chainId: chainId,\n      notificationId: notificationId\n    });\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification: addNotification,\n      notifications: notifications,\n      removeNotification: removeNotification\n    },\n    children: children\n  });\n}","map":{"version":3,"mappings":";;AAAA,SAAoBA,WAApB,EAAiCC,SAAjC,EAA4CC,UAA5C,QAA8D,OAA9D;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAAiCC,qBAAjC,QAAyF,SAAzF;AACA,SAASC,mBAAT,QAAoC,WAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAMA,OAAM,SAAUC,qBAAV,OAAmD;EAAA,IAAjBC,QAAiB,QAAjBA,QAAiB;;EACvD,kBAAkCP,UAAU,CAACI,mBAAD,EAAsBD,qBAAtB,CAA5C;EAAA;EAAA,IAAOK,aAAP;EAAA,IAAsBC,QAAtB;;EACA,iBAA6BR,SAAS,EAAtC;EAAA,IAAQS,OAAR,cAAQA,OAAR;EAAA,IAAiBC,OAAjB,cAAiBA,OAAjB;;EAEAZ,SAAS,CAAC,YAAK;IACb,IAAIY,OAAO,IAAID,OAAf,EAAwB;MACtBD,QAAQ,CAAC;QACPG,IAAI,EAAE,kBADC;QAEPF,OAAO,EAAEA,OAFF;QAGPG,YAAY,EAAE;UACZD,IAAI,EAAE,iBADM;UAEZE,EAAE,EAAET,MAAM,EAFE;UAGZU,WAAW,EAAEC,IAAI,CAACC,GAAL,EAHD;UAIZC,OAAO,EAAEP;QAJG;MAHP,CAAD,CAAR;IAUD;EACF,CAbQ,EAaN,CAACA,OAAD,EAAUD,OAAV,CAbM,CAAT;EAeA,IAAMS,eAAe,GAAGrB,WAAW,CACjC,iBAAsD;IAAA,IAAnDe,YAAmD,SAAnDA,YAAmD;IAAA,IAArCH,OAAqC,SAArCA,OAAqC;IACpDD,QAAQ,CAAC;MACPG,IAAI,EAAE,kBADC;MAEPF,OAAO,EAAPA,OAFO;MAGPG,YAAY,kCAAOA,YAAP,GAAmB;QAAEC,EAAE,EAAET,MAAM;MAAZ,CAAnB;IAHL,CAAD,CAAR;EAKD,CAPgC,EAQjC,CAACI,QAAD,CARiC,CAAnC;EAWA,IAAMW,kBAAkB,GAAGtB,WAAW,CACpC,iBAA2D;IAAA,IAAxDuB,cAAwD,SAAxDA,cAAwD;IAAA,IAAxCX,OAAwC,SAAxCA,OAAwC;IACzDD,QAAQ,CAAC;MACPG,IAAI,EAAE,qBADC;MAEPF,OAAO,EAAPA,OAFO;MAGPW,cAAc,EAAdA;IAHO,CAAD,CAAR;EAKD,CAPmC,EAQpC,CAACZ,QAAD,CARoC,CAAtC;EAWA,OACEa,KAACpB,oBAAoB,CAACqB,QAAtB,EAA8B;IAACC,KAAK,EAAE;MAAEL,eAAe,EAAfA,eAAF;MAAmBX,aAAa,EAAbA,aAAnB;MAAkCY,kBAAkB,EAAlBA;IAAlC,CAAR;IAAgEb,QAAQ,EAAEA;EAA1E,CAA9B,CADF;AAGD","names":["useCallback","useEffect","useReducer","useEthers","NotificationsContext","DEFAULT_NOTIFICATIONS","notificationReducer","nanoid","NotificationsProvider","children","notifications","dispatch","chainId","account","type","notification","id","submittedAt","Date","now","address","addNotification","removeNotification","notificationId","_jsx","Provider","value"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\notifications\\provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers } from '../../hooks'\nimport { NotificationsContext } from './context'\nimport { AddNotificationPayload, DEFAULT_NOTIFICATIONS, RemoveNotificationPayload } from './model'\nimport { notificationReducer } from './reducer'\nimport { nanoid } from 'nanoid'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function NotificationsProvider({ children }: Props) {\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS)\n  const { chainId, account } = useEthers()\n\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account,\n        },\n      })\n    }\n  }, [account, chainId])\n\n  const addNotification = useCallback(\n    ({ notification, chainId }: AddNotificationPayload) => {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId,\n        notification: { ...notification, id: nanoid() },\n      })\n    },\n    [dispatch]\n  )\n\n  const removeNotification = useCallback(\n    ({ notificationId, chainId }: RemoveNotificationPayload) => {\n      dispatch({\n        type: 'REMOVE_NOTIFICATION',\n        chainId,\n        notificationId,\n      })\n    },\n    [dispatch]\n  )\n\n  return (\n    <NotificationsContext.Provider value={{ addNotification, notifications, removeNotification }} children={children} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}