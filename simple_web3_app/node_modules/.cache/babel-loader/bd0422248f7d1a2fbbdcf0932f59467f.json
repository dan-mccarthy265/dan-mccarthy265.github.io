{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { useConfig } from '../../src';\nimport { useEthers } from './useEthers';\nimport { estimateGasLimit, usePromiseTransaction } from './usePromiseTransaction';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\n\nexport function useSendTransaction(options) {\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var _usePromiseTransactio = usePromiseTransaction(chainId, options),\n      promiseTransaction = _usePromiseTransactio.promiseTransaction,\n      state = _usePromiseTransactio.state,\n      resetState = _usePromiseTransactio.resetState;\n\n  var _useConfig = useConfig(),\n      _useConfig$bufferGasL = _useConfig.bufferGasLimitPercentage,\n      bufferGasLimitPercentage = _useConfig$bufferGasL === void 0 ? 0 : _useConfig$bufferGasL;\n\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transactionRequest) {\n      var signer, gasLimit;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              signer = (options === null || options === void 0 ? void 0 : options.signer) || (library === null || library === void 0 ? void 0 : library.getSigner());\n\n              if (!signer) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return estimateGasLimit(transactionRequest, signer, bufferGasLimitPercentage);\n\n            case 4:\n              gasLimit = _context.sent;\n              _context.next = 7;\n              return promiseTransaction(signer.sendTransaction(Object.assign(Object.assign({}, transactionRequest), {\n                gasLimit: gasLimit\n              })));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendTransaction(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    sendTransaction: sendTransaction,\n    state: state,\n    resetState: resetState\n  };\n}","map":{"version":3,"mappings":";;AACA,SAA6BA,SAA7B,QAA8C,WAA9C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,QAAwD,yBAAxD;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,kBAAV,CAA6BC,OAA7B,EAAyD;EAC7D,iBAA6BJ,SAAS,EAAtC;EAAA,IAAQK,OAAR,cAAQA,OAAR;EAAA,IAAiBC,OAAjB,cAAiBA,OAAjB;;EACA,4BAAkDJ,qBAAqB,CAACI,OAAD,EAAUF,OAAV,CAAvE;EAAA,IAAQG,kBAAR,yBAAQA,kBAAR;EAAA,IAA4BC,KAA5B,yBAA4BA,KAA5B;EAAA,IAAmCC,UAAnC,yBAAmCA,UAAnC;;EACA,iBAAyCV,SAAS,EAAlD;EAAA,uCAAQW,wBAAR;EAAA,IAAQA,wBAAR,sCAAmC,CAAnC;;EAEA,IAAMC,eAAe;IAAA,sEAAG,iBAAOC,kBAAP;MAAA;MAAA;QAAA;UAAA;YAAA;cAChBC,MADgB,GACP,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,MAAmBR,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAES,SAAT,EAAnB,CADO;;cAAA,KAElBD,MAFkB;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAGGZ,gBAAgB,CAACW,kBAAD,EAAqBC,MAArB,EAA6BH,wBAA7B,CAHnB;;YAAA;cAGdK,QAHc;cAAA;cAAA,OAKdR,kBAAkB,CACtBM,MAAM,CAACF,eAAP,CAAsBK,gCACjBJ,kBADiB,GACC;gBACrBG,QAAQ,EAARA;cADqB,CADD,CAAtB,CADsB,CALJ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAfJ,eAAe;MAAA;IAAA;EAAA,GAArB;;EAcA,OAAO;IAAEA,eAAe,EAAfA,eAAF;IAAmBH,KAAK,EAALA,KAAnB;IAA0BC,UAAU,EAAVA;EAA1B,CAAP;AACD","names":["useConfig","useEthers","estimateGasLimit","usePromiseTransaction","useSendTransaction","options","library","chainId","promiseTransaction","state","resetState","bufferGasLimitPercentage","sendTransaction","transactionRequest","signer","getSigner","gasLimit","Object"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useSendTransaction.ts"],"sourcesContent":["import { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions, useConfig } from '../../src'\nimport { useEthers } from './useEthers'\nimport { estimateGasLimit, usePromiseTransaction } from './usePromiseTransaction'\n\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\n  const { bufferGasLimitPercentage = 0 } = useConfig()\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = options?.signer || library?.getSigner()\n    if (signer) {\n      const gasLimit = await estimateGasLimit(transactionRequest, signer, bufferGasLimitPercentage)\n\n      await promiseTransaction(\n        signer.sendTransaction({\n          ...transactionRequest,\n          gasLimit,\n        })\n      )\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}