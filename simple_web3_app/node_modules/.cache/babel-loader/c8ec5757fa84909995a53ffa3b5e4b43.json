{"ast":null,"code":"import { useContext, useEffect, useMemo } from 'react';\nimport { MultiChainStatesContext } from '../providers';\n/**\n * A low-level function that makes multiple calls to specific methods of specific contracts and returns values or error if present.\n * The hook will cause the component to refresh when values change.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCalls} where applicable instead of this method.\n * @public\n * @param calls List of calls, also see {@link RawCall}. Calls need to be in the same order across component renders.\n * @returns list of multicall calls. See {@link RawCallResult} and {@link useRawCall}.\n */\n\nexport function useRawCalls(calls) {\n  var _useContext = useContext(MultiChainStatesContext),\n      dispatchCalls = _useContext.dispatchCalls,\n      chains = _useContext.chains;\n\n  useEffect(function () {\n    var filteredCalls = calls.filter(Boolean);\n    dispatchCalls({\n      type: 'ADD_CALLS',\n      calls: filteredCalls\n    });\n    return function () {\n      return dispatchCalls({\n        type: 'REMOVE_CALLS',\n        calls: filteredCalls\n      });\n    };\n  }, [JSON.stringify(calls), dispatchCalls]);\n  return useMemo(function () {\n    return calls.map(function (call) {\n      return call ? extractCallResult(chains, call) : undefined;\n    });\n  }, [JSON.stringify(calls), chains]);\n}\n/**\n * A low-level function that makes a call to a specific method of a specific contract and returns the value or error if present.\n * The hook will cause the component to refresh whenever a new block is mined and the value is changed.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCall} where applicable instead of this method.\n *\n * @param call a single call, also see {@link RawCall}.\n *             A call can be Falsy, as it is important to keep the same ordering of hooks even if in a given render cycle\n *             and there might be not enough information to perform a call.\n * @public\n * @returns result of multicall call.\n *   The hook returns {@link RawCallResult} type.\n *   That is: `undefined` when call didn't return yet or object `{ success: boolean, value: string }` if it did,\n *   `success` - boolean indicating whether call was successful or not,\n *   `value` - encoded result when success is `true` or encoded error message when success is `false`.\n */\n\nexport function useRawCall(call) {\n  return useRawCalls([call])[0];\n}\n\nfunction extractCallResult(chains, call) {\n  var _a, _b, _c, _d;\n\n  var chainId = call.chainId;\n  return chainId !== undefined ? (_d = (_c = (_b = (_a = chains[chainId]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.state) === null || _c === void 0 ? void 0 : _c[call.address.toLowerCase()]) === null || _d === void 0 ? void 0 : _d[call.data] : undefined;\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,OAAhC,QAA+C,OAA/C;AACA,SAASC,uBAAT,QAAuD,cAAvD;AAKA;;;;;;;;;;;AAUA,OAAM,SAAUC,WAAV,CAAsBC,KAAtB,EAAgD;EACpD,kBAAkCL,UAAU,CAACG,uBAAD,CAA5C;EAAA,IAAQG,aAAR,eAAQA,aAAR;EAAA,IAAuBC,MAAvB,eAAuBA,MAAvB;;EAEAN,SAAS,CAAC,YAAK;IACb,IAAMO,aAAa,GAAGH,KAAK,CAACI,MAAN,CAAaC,OAAb,CAAtB;IACAJ,aAAa,CAAC;MAAEK,IAAI,EAAE,WAAR;MAAqBN,KAAK,EAAEG;IAA5B,CAAD,CAAb;IACA,OAAO;MAAA,OAAMF,aAAa,CAAC;QAAEK,IAAI,EAAE,cAAR;QAAwBN,KAAK,EAAEG;MAA/B,CAAD,CAAnB;IAAA,CAAP;EACD,CAJQ,EAIN,CAACI,IAAI,CAACC,SAAL,CAAeR,KAAf,CAAD,EAAwBC,aAAxB,CAJM,CAAT;EAMA,OAAOJ,OAAO,CACZ;IAAA,OACEG,KAAK,CAACS,GAAN,CAAU,UAACC,IAAD,EAAS;MACjB,OAAOA,IAAI,GAAGC,iBAAiB,CAACT,MAAD,EAASQ,IAAT,CAApB,GAAqCE,SAAhD;IACD,CAFD,CADF;EAAA,CADY,EAKZ,CAACL,IAAI,CAACC,SAAL,CAAeR,KAAf,CAAD,EAAwBE,MAAxB,CALY,CAAd;AAOD;AAED;;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUW,UAAV,CAAqBH,IAArB,EAA0C;EAC9C,OAAOX,WAAW,CAAC,CAACW,IAAD,CAAD,CAAX,CAAoB,CAApB,CAAP;AACD;;AAED,SAASC,iBAAT,CAA2BT,MAA3B,EAAoDQ,IAApD,EAAiE;;;EAC/D,IAAMI,OAAO,GAAGJ,IAAI,CAACI,OAArB;EACA,OAAOA,OAAO,KAAKF,SAAZ,GAAwB,8BAAM,CAACE,OAAD,CAAN,MAAe,IAAf,IAAeC,aAAf,GAAe,MAAf,GAAeA,GAAEC,KAAjB,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,KAAxB,MAA6B,IAA7B,IAA6BC,aAA7B,GAA6B,MAA7B,GAA6BA,GAAGT,IAAI,CAACU,OAAL,CAAaC,WAAb,EAAH,CAA7B,MAA2D,IAA3D,IAA2DC,aAA3D,GAA2D,MAA3D,GAA2DA,GAAGZ,IAAI,CAACa,IAAR,CAAnF,GAAmGX,SAA1G;AACD","names":["useContext","useEffect","useMemo","MultiChainStatesContext","useRawCalls","calls","dispatchCalls","chains","filteredCalls","filter","Boolean","type","JSON","stringify","map","call","extractCallResult","undefined","useRawCall","chainId","_a","value","_b","state","_c","address","toLowerCase","_d","data"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useRawCalls.ts"],"sourcesContent":["import { useContext, useEffect, useMemo } from 'react'\nimport { MultiChainStatesContext, RawCallResult } from '../providers'\nimport { RawCall } from '../providers'\nimport { Falsy } from '../model/types'\nimport { MultiChainState } from '../providers/chainState/multiChainStates/context'\n\n/**\n * A low-level function that makes multiple calls to specific methods of specific contracts and returns values or error if present.\n * The hook will cause the component to refresh when values change.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCalls} where applicable instead of this method.\n * @public\n * @param calls List of calls, also see {@link RawCall}. Calls need to be in the same order across component renders.\n * @returns list of multicall calls. See {@link RawCallResult} and {@link useRawCall}.\n */\nexport function useRawCalls(calls: (RawCall | Falsy)[]): RawCallResult[] {\n  const { dispatchCalls, chains } = useContext(MultiChainStatesContext)\n\n  useEffect(() => {\n    const filteredCalls = calls.filter(Boolean) as RawCall[]\n    dispatchCalls({ type: 'ADD_CALLS', calls: filteredCalls })\n    return () => dispatchCalls({ type: 'REMOVE_CALLS', calls: filteredCalls })\n  }, [JSON.stringify(calls), dispatchCalls])\n\n  return useMemo(\n    () =>\n      calls.map((call) => {\n        return call ? extractCallResult(chains, call) : undefined\n      }),\n    [JSON.stringify(calls), chains]\n  )\n}\n\n/**\n * A low-level function that makes a call to a specific method of a specific contract and returns the value or error if present.\n * The hook will cause the component to refresh whenever a new block is mined and the value is changed.\n *\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * It is recommended to use {@link useCall} where applicable instead of this method.\n *\n * @param call a single call, also see {@link RawCall}.\n *             A call can be Falsy, as it is important to keep the same ordering of hooks even if in a given render cycle\n *             and there might be not enough information to perform a call.\n * @public\n * @returns result of multicall call.\n *   The hook returns {@link RawCallResult} type.\n *   That is: `undefined` when call didn't return yet or object `{ success: boolean, value: string }` if it did,\n *   `success` - boolean indicating whether call was successful or not,\n *   `value` - encoded result when success is `true` or encoded error message when success is `false`.\n */\nexport function useRawCall(call: RawCall | Falsy) {\n  return useRawCalls([call])[0]\n}\n\nfunction extractCallResult(chains: MultiChainState, call: RawCall): RawCallResult {\n  const chainId = call.chainId\n  return chainId !== undefined ? chains[chainId]?.value?.state?.[call.address.toLowerCase()]?.[call.data] : undefined\n}\n"]},"metadata":{},"sourceType":"module"}