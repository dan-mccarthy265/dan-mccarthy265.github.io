{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { getChainById } from '../helpers';\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig } from '../hooks';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport multicall2ABI from '../constants/abi/MultiCall2.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\n\nexport function LocalMulticallProvider(_ref) {\n  var children = _ref.children;\n  var updateConfig = useUpdateConfig();\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var _useConfig = useConfig(),\n      multicallAddresses = _useConfig.multicallAddresses,\n      multicallVersion = _useConfig.multicallVersion;\n\n  var _useState = useState(LocalMulticallState.Unknown),\n      _useState2 = _slicedToArray(_useState, 2),\n      localMulticallState = _useState2[0],\n      setLocalMulticallState = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      multicallBlockNumber = _useState4[0],\n      setMulticallBlockNumber = _useState4[1];\n\n  var blockNumber = useBlockNumber();\n  useEffect(function () {\n    var _a;\n\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      var signer = library.getSigner();\n\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error);\n        return;\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying);\n\n      var deployMulticall = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _yield$deployContract, contractAddress, _blockNumber;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return deployContract(multicallVersion === 1 ? multicallABI : multicall2ABI, signer);\n\n                case 3:\n                  _yield$deployContract = _context.sent;\n                  contractAddress = _yield$deployContract.contractAddress;\n                  _blockNumber = _yield$deployContract.blockNumber;\n                  updateConfig({\n                    multicallAddresses: _defineProperty({}, chainId, contractAddress)\n                  });\n                  setMulticallBlockNumber(_blockNumber);\n                  setLocalMulticallState(LocalMulticallState.Deployed);\n                  _context.next = 14;\n                  break;\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t0 = _context[\"catch\"](0);\n                  setLocalMulticallState(LocalMulticallState.Error);\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 11]]);\n        }));\n\n        return function deployMulticall() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      void deployMulticall();\n    }\n  }, [library, chainId]);\n  var awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    });\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    });\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["useEffect","useState","getChainById","useEthers","useBlockNumber","useConfig","useUpdateConfig","multicallABI","multicall2ABI","deployContract","LocalMulticallState","LocalMulticallProvider","children","updateConfig","library","chainId","multicallAddresses","multicallVersion","Unknown","localMulticallState","setLocalMulticallState","multicallBlockNumber","setMulticallBlockNumber","blockNumber","_a","isLocalChain","NonLocal","Deployed","Deploying","signer","getSigner","Error","deployMulticall","contractAddress","awaitingMulticallBlock","_jsx"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/providers/LocalMulticallProvider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useState } from 'react'\nimport { getChainById } from '../helpers'\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig } from '../hooks'\nimport multicallABI from '../constants/abi/MultiCall.json'\nimport multicall2ABI from '../constants/abi/MultiCall2.json'\nimport { deployContract } from '../helpers/contract'\n\ninterface LocalMulticallProps {\n  children: ReactNode\n}\n\nenum LocalMulticallState {\n  Unknown,\n  NonLocal,\n  Deploying,\n  Deployed,\n  Error,\n}\n\nexport function LocalMulticallProvider({ children }: LocalMulticallProps) {\n  const updateConfig = useUpdateConfig()\n  const { library, chainId } = useEthers()\n  const { multicallAddresses, multicallVersion } = useConfig()\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown)\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState<number>()\n  const blockNumber = useBlockNumber()\n\n  useEffect(() => {\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown)\n    } else if (!getChainById(chainId)?.isLocalChain) {\n      setLocalMulticallState(LocalMulticallState.NonLocal)\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed)\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const signer = library.getSigner()\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error)\n        return\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying)\n\n      const deployMulticall = async () => {\n        try {\n          const { contractAddress, blockNumber } = await deployContract(\n            multicallVersion === 1 ? multicallABI : multicall2ABI,\n            signer\n          )\n          updateConfig({ multicallAddresses: { [chainId]: contractAddress } })\n          setMulticallBlockNumber(blockNumber)\n          setLocalMulticallState(LocalMulticallState.Deployed)\n        } catch {\n          setLocalMulticallState(LocalMulticallState.Error)\n        }\n      }\n      void deployMulticall()\n    }\n  }, [library, chainId])\n\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber\n\n  if (\n    localMulticallState === LocalMulticallState.Deploying ||\n    (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)\n  ) {\n    return <div>Deploying multicall...</div>\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return <div>Error deploying multicall contract</div>\n  } else {\n    return <>{children}</>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}