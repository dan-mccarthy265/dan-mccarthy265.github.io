{"ast":null,"code":"import { useConfig } from '../../src';\nimport { useEthers } from './useEthers';\nimport { estimateGasLimit, usePromiseTransaction } from './usePromiseTransaction';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\n\nexport function useSendTransaction(options) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(chainId, options);\n  const {\n    bufferGasLimitPercentage = 0\n  } = useConfig();\n\n  const sendTransaction = async transactionRequest => {\n    const signer = (options === null || options === void 0 ? void 0 : options.signer) || (library === null || library === void 0 ? void 0 : library.getSigner());\n\n    if (signer) {\n      const gasLimit = await estimateGasLimit(transactionRequest, signer, bufferGasLimitPercentage);\n      await promiseTransaction(signer.sendTransaction(Object.assign(Object.assign({}, transactionRequest), {\n        gasLimit\n      })));\n    }\n  };\n\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"mappings":"AACA,SAA6BA,SAA7B,QAA8C,WAA9C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,QAAwD,yBAAxD;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,kBAAV,CAA6BC,OAA7B,EAAyD;EAC7D,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAuBN,SAAS,EAAtC;EACA,MAAM;IAAEO,kBAAF;IAAsBC,KAAtB;IAA6BC;EAA7B,IAA4CP,qBAAqB,CAACI,OAAD,EAAUF,OAAV,CAAvE;EACA,MAAM;IAAEM,wBAAwB,GAAG;EAA7B,IAAmCX,SAAS,EAAlD;;EAEA,MAAMY,eAAe,GAAG,MAAOC,kBAAP,IAAiD;IACvE,MAAMC,MAAM,GAAG,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,MAAmBR,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAES,SAAT,EAAnB,CAAf;;IACA,IAAID,MAAJ,EAAY;MACV,MAAME,QAAQ,GAAG,MAAMd,gBAAgB,CAACW,kBAAD,EAAqBC,MAArB,EAA6BH,wBAA7B,CAAvC;MAEA,MAAMH,kBAAkB,CACtBM,MAAM,CAACF,eAAP,CAAsBK,gCACjBJ,kBADiB,GACC;QACrBG;MADqB,CADD,CAAtB,CADsB,CAAxB;IAMD;EACF,CAZD;;EAcA,OAAO;IAAEJ,eAAF;IAAmBH,KAAnB;IAA0BC;EAA1B,CAAP;AACD","names":["useConfig","useEthers","estimateGasLimit","usePromiseTransaction","useSendTransaction","options","library","chainId","promiseTransaction","state","resetState","bufferGasLimitPercentage","sendTransaction","transactionRequest","signer","getSigner","gasLimit","Object"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\useSendTransaction.ts"],"sourcesContent":["import { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions, useConfig } from '../../src'\nimport { useEthers } from './useEthers'\nimport { estimateGasLimit, usePromiseTransaction } from './usePromiseTransaction'\n\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\n  const { bufferGasLimitPercentage = 0 } = useConfig()\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = options?.signer || library?.getSigner()\n    if (signer) {\n      const gasLimit = await estimateGasLimit(transactionRequest, signer, bufferGasLimitPercentage)\n\n      await promiseTransaction(\n        signer.sendTransaction({\n          ...transactionRequest,\n          gasLimit,\n        })\n      )\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}