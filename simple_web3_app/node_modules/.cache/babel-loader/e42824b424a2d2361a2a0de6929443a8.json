{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { BigNumber, errors } from 'ethers';\n/**\n * @internal\n */\n\nexport async function estimateGasLimit(transactionRequest, signer, bufferGasLimitPercentage) {\n  if (!signer || !transactionRequest) {\n    return undefined;\n  }\n\n  const estimatedGas = transactionRequest.gasLimit ? BigNumber.from(transactionRequest.gasLimit) : await signer.estimateGas(transactionRequest);\n  return estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(bufferGasLimitPercentage + 100).div(100);\n}\n\nconst isDroppedAndReplaced = e => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n\nexport function usePromiseTransaction(chainId, options) {\n  const [state, setState] = useState({\n    status: 'None'\n  });\n  const {\n    addTransaction\n  } = useTransactionsContext();\n  const {\n    addNotification\n  } = useNotificationsContext();\n  const resetState = useCallback(() => {\n    setState({\n      status: 'None'\n    });\n  }, [setState]);\n  const promiseTransaction = useCallback(async transactionPromise => {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!chainId) return;\n    let transaction = undefined;\n\n    try {\n      setState({\n        status: 'PendingSignature',\n        chainId\n      });\n      transaction = await transactionPromise;\n      setState({\n        transaction,\n        status: 'Mining',\n        chainId\n      });\n      addTransaction({\n        transaction: Object.assign(Object.assign({}, transaction), {\n          chainId: chainId\n        }),\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      const receipt = await transaction.wait();\n      setState({\n        receipt,\n        transaction,\n        status: 'Success',\n        chainId\n      });\n      return receipt;\n    } catch (e) {\n      const errorMessage = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : e.reason) !== null && _c !== void 0 ? _c : (_d = e.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : e.message;\n\n      if (transaction) {\n        const droppedAndReplaced = isDroppedAndReplaced(e);\n\n        if (droppedAndReplaced) {\n          const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n          const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n          addNotification({\n            notification: {\n              type,\n              submittedAt: Date.now(),\n              transaction: e.replacement,\n              receipt: e.receipt,\n              transactionName: (_f = e.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n              originalTransaction: transaction\n            },\n            chainId\n          });\n          setState({\n            status,\n            transaction: e.replacement,\n            originalTransaction: transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        } else {\n          setState({\n            status: 'Fail',\n            transaction,\n            receipt: e.receipt,\n            errorMessage,\n            chainId\n          });\n        }\n      } else {\n        setState({\n          status: 'Exception',\n          errorMessage,\n          chainId\n        });\n      }\n\n      return undefined;\n    }\n  }, [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"mappings":"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","names":["useCallback","useState","useNotificationsContext","useTransactionsContext","BigNumber","errors","estimateGasLimit","transactionRequest","signer","bufferGasLimitPercentage","undefined","estimatedGas","gasLimit","from","estimateGas","mul","div","isDroppedAndReplaced","e","code","TRANSACTION_REPLACED","replacement","reason","cancelled","usePromiseTransaction","chainId","options","state","setState","status","addTransaction","addNotification","resetState","promiseTransaction","transactionPromise","transaction","submittedAt","Date","now","transactionName","receipt","wait","errorMessage","error","_a","message","_b","_c","data","_d","_e","droppedAndReplaced","type","notification","_f","originalTransaction"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\hooks\\usePromiseTransaction.ts"],"sourcesContent":["import { TransactionRequest, TransactionResponse } from '@ethersproject/abstract-provider'\nimport { useCallback, useState } from 'react'\nimport { useNotificationsContext, useTransactionsContext } from '../providers'\nimport { TransactionStatus, TransactionOptions } from '../../src'\nimport { TransactionState } from '../model'\nimport { BigNumber, errors, Signer } from 'ethers'\n\n/**\n * @internal\n */\nexport async function estimateGasLimit(\n  transactionRequest: TransactionRequest | undefined,\n  signer: Signer | undefined,\n  bufferGasLimitPercentage: number\n) {\n  if (!signer || !transactionRequest) {\n    return undefined\n  }\n  const estimatedGas = transactionRequest.gasLimit\n    ? BigNumber.from(transactionRequest.gasLimit)\n    : await signer.estimateGas(transactionRequest)\n  return estimatedGas?.mul(bufferGasLimitPercentage + 100).div(100)\n}\n\nconst isDroppedAndReplaced = (e: any) =>\n  e?.code === errors.TRANSACTION_REPLACED && e?.replacement && (e?.reason === 'repriced' || e?.cancelled === false)\n\nexport function usePromiseTransaction(chainId: number | undefined, options?: TransactionOptions) {\n  const [state, setState] = useState<TransactionStatus>({ status: 'None' })\n  const { addTransaction } = useTransactionsContext()\n  const { addNotification } = useNotificationsContext()\n\n  const resetState = useCallback(() => {\n    setState({ status: 'None' })\n  }, [setState])\n\n  const promiseTransaction = useCallback(\n    async (transactionPromise: Promise<TransactionResponse>) => {\n      if (!chainId) return\n      let transaction: TransactionResponse | undefined = undefined\n      try {\n        setState({ status: 'PendingSignature', chainId })\n\n        transaction = await transactionPromise\n\n        setState({ transaction, status: 'Mining', chainId })\n        addTransaction({\n          transaction: {\n            ...transaction,\n            chainId: chainId,\n          },\n          submittedAt: Date.now(),\n          transactionName: options?.transactionName,\n        })\n        const receipt = await transaction.wait()\n        setState({ receipt, transaction, status: 'Success', chainId })\n        return receipt\n      } catch (e: any) {\n        const errorMessage = e.error?.message ?? e.reason ?? e.data?.message ?? e.message\n        if (transaction) {\n          const droppedAndReplaced = isDroppedAndReplaced(e)\n\n          if (droppedAndReplaced) {\n            const status: TransactionState = e.receipt.status === 0 ? 'Fail' : 'Success'\n            const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed'\n\n            addNotification({\n              notification: {\n                type,\n                submittedAt: Date.now(),\n                transaction: e.replacement,\n                receipt: e.receipt,\n                transactionName: e.replacement?.transactionName,\n                originalTransaction: transaction,\n              },\n              chainId,\n            })\n\n            setState({\n              status,\n              transaction: e.replacement,\n              originalTransaction: transaction,\n              receipt: e.receipt,\n              errorMessage,\n              chainId,\n            })\n          } else {\n            setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId })\n          }\n        } else {\n          setState({ status: 'Exception', errorMessage, chainId })\n        }\n        return undefined\n      }\n    },\n    [chainId, setState, addTransaction, options]\n  )\n\n  return { promiseTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}