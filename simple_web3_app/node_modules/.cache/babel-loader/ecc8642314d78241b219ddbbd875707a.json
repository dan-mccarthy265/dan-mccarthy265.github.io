{"ast":null,"code":"import _slicedToArray from \"/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useReducer } from 'react';\nimport pickBy from 'lodash.pickby';\nimport { DEFAULT_CONFIG } from '../../model/config/default';\nimport { ConfigContext } from './context';\nimport { configReducer } from './reducer';\n/**\n * We strip supplied config of undefined fields because it can easily break TS assumptions.\n *\n * Illustrative example:\n *\n * type FullConf = { something: string }\n * type PartConf = Partial<FullConf>\n *\n * const defaultConf: FullConf = { something: 'default' }\n * const suppliedConf: PartConf = { something: undefined }\n * const conf: FullConf = {...defaultConf, ...suppliedConf}\n * conf.something.toString() // OK according to TS, breaks on runtime.\n */\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nvar noUndefined = function noUndefined(x) {\n  return x !== undefined;\n};\n\nexport function ConfigProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  var configWithDefaults = Object.assign(Object.assign(Object.assign({}, DEFAULT_CONFIG), pickBy(config, noUndefined)), {\n    notifications: Object.assign(Object.assign({}, DEFAULT_CONFIG.notifications), pickBy(config.notifications, noUndefined))\n  });\n\n  var _useReducer = useReducer(configReducer, configWithDefaults),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      reducedConfig = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  return _jsx(ConfigContext.Provider, {\n    value: {\n      config: reducedConfig,\n      updateConfig: dispatch\n    },\n    children: children\n  });\n}","map":{"version":3,"mappings":";;AAAA,SAAoBA,UAApB,QAAsC,OAAtC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,aAAT,QAA8B,WAA9B;AAOA;;;;;;;;;;;;;;AAcA;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD;EAAA,OAAYA,CAAC,KAAKC,SAAlB;AAAA,CAApB;;AACA,OAAM,SAAUC,cAAV,OAAkE;EAAA,IAAvCC,MAAuC,QAAvCA,MAAuC;EAAA,IAA/BC,QAA+B,QAA/BA,QAA+B;EACtE,IAAMC,kBAAkB,iDACnBT,cADmB,GAEnBD,MAAM,CAACQ,MAAD,EAASJ,WAAT,CAFa,GAEQ;IAC9BO,aAAa,kCACRV,cAAc,CAACU,aADP,GAERX,MAAM,CAACQ,MAAM,CAACG,aAAR,EAAuBP,WAAvB,CAFE;EADiB,CAFR,CAAxB;;EAQA,kBAAkCL,UAAU,CAACI,aAAD,EAAgBO,kBAAhB,CAA5C;EAAA;EAAA,IAAOE,aAAP;EAAA,IAAsBC,QAAtB;;EACA,OAAOC,KAACZ,aAAa,CAACa,QAAf,EAAuB;IAACC,KAAK,EAAE;MAAER,MAAM,EAAEI,aAAV;MAAyBK,YAAY,EAAEJ;IAAvC,CAAR;IAA2DJ,QAAQ,EAAEA;EAArE,CAAvB,CAAP;AACD","names":["useReducer","pickBy","DEFAULT_CONFIG","ConfigContext","configReducer","noUndefined","x","undefined","ConfigProvider","config","children","configWithDefaults","notifications","reducedConfig","dispatch","_jsx","Provider","value","updateConfig"],"sources":["/mnt/c/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@usedapp/core/src/providers/config/provider.tsx"],"sourcesContent":["import { ReactNode, useReducer } from 'react'\nimport pickBy from 'lodash.pickby'\nimport { Config, FullConfig } from '../../constants'\nimport { DEFAULT_CONFIG } from '../../model/config/default'\nimport { ConfigContext } from './context'\nimport { configReducer } from './reducer'\n\ninterface ConfigProviderProps {\n  children: ReactNode\n  config: Config\n}\n\n/**\n * We strip supplied config of undefined fields because it can easily break TS assumptions.\n *\n * Illustrative example:\n *\n * type FullConf = { something: string }\n * type PartConf = Partial<FullConf>\n *\n * const defaultConf: FullConf = { something: 'default' }\n * const suppliedConf: PartConf = { something: undefined }\n * const conf: FullConf = {...defaultConf, ...suppliedConf}\n * conf.something.toString() // OK according to TS, breaks on runtime.\n */\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nconst noUndefined = (x: any) => x !== undefined\nexport function ConfigProvider({ config, children }: ConfigProviderProps) {\n  const configWithDefaults: FullConfig = {\n    ...DEFAULT_CONFIG,\n    ...pickBy(config, noUndefined),\n    notifications: {\n      ...DEFAULT_CONFIG.notifications,\n      ...pickBy(config.notifications, noUndefined),\n    },\n  }\n  const [reducedConfig, dispatch] = useReducer(configReducer, configWithDefaults)\n  return <ConfigContext.Provider value={{ config: reducedConfig, updateConfig: dispatch }} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}