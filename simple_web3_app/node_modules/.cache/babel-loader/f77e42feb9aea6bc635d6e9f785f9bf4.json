{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/dcmcc/Desktop/dan-mccarthy265.github.io/simple_web3_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Contract } from '@ethersproject/contracts';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nvar ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\n\nexport var multicall1Factory = function multicall1Factory(fastEncoding) {\n  return fastEncoding ? fastEncodingMulticall : multicall;\n};\n/**\n * @public\n */\n\nexport function multicall(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n/**\n * @public\n */\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var contract, _yield$contract$aggre, _yield$contract$aggre2, results;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.aggregate(requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            _yield$contract$aggre = _context.sent;\n            _yield$contract$aggre2 = _slicedToArray(_yield$contract$aggre, 2);\n            results = _yield$contract$aggre2[1];\n            return _context.abrupt(\"return\", decodeResult(results, requests));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}\n\nexport function fastEncodingMulticall(_x5, _x6, _x7, _x8) {\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction _fastEncodingMulticall() {\n  _fastEncodingMulticall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, address, blockNumber, requests) {\n    var response, _decodeAggregate, _decodeAggregate2, results;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {});\n\n          case 2:\n            _context2.next = 4;\n            return provider.call({\n              to: address,\n              data: encodeAggregate(requests.map(function (_ref2) {\n                var address = _ref2.address,\n                    data = _ref2.data;\n                return [address, data];\n              }))\n            }, blockNumber);\n\n          case 4:\n            response = _context2.sent;\n            _decodeAggregate = decodeAggregate(response), _decodeAggregate2 = _slicedToArray(_decodeAggregate, 2), results = _decodeAggregate2[1];\n            return _context2.abrupt(\"return\", decodeResult(results, requests));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction decodeResult(results, requests) {\n  var _a;\n\n  var state = {};\n\n  for (var i = 0; i < requests.length; i++) {\n    var _requests$i = requests[i],\n        address = _requests$i.address,\n        data = _requests$i.data;\n    var result = results[i];\n    var stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"mappings":";;;AACA,SAASA,QAAT,QAAyB,0BAAzB;AAEA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,wBAAjD;AAIA,IAAMC,GAAG,GAAG,CACV,0HADU,CAAZ;AAIA;;;;AAGA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,YAAD;EAAA,OAA4BA,YAAY,GAAGC,qBAAH,GAA2BC,SAAnE;AAAA,CAA1B;AAEP;;;;AAGA,gBAAsBA,SAAtB;EAAA;AAAA;AAiBA;;;;;0EAjBO,iBACLC,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MAMDA,QAAQ,CAACC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,iCAOI,EAPJ;;UAAA;YASCC,QATD,GASY,IAAIb,QAAJ,CAAaS,OAAb,EAAsBN,GAAtB,EAA2BK,QAA3B,CATZ;YAAA;YAAA,OAU4CK,QAAQ,CAACC,SAAT,CAC/CH,QAAQ,CAACI,GAAT,CAAa;cAAA,IAAGN,OAAH,QAAGA,OAAH;cAAA,IAAYO,IAAZ,QAAYA,IAAZ;cAAA,OAAuB,CAACP,OAAD,EAAUO,IAAV,CAAvB;YAAA,CAAb,CAD+C,EAE/C;cAAEC,QAAQ,EAAEP;YAAZ,CAF+C,CAV5C;;UAAA;YAAA;YAAA;YAUIQ,OAVJ;YAAA,iCAcEC,YAAY,CAACD,OAAD,EAAUP,QAAV,CAdd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAoBP,gBAAsBL,qBAAtB;EAAA;AAAA;;;sFAAO,kBACLE,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MAMDA,QAAQ,CAACC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,kCAOI,EAPJ;;UAAA;YAAA;YAAA,OASkBJ,QAAQ,CAACY,IAAT,CACrB;cACEC,EAAE,EAAEZ,OADN;cAEEO,IAAI,EAAEf,eAAe,CAACU,QAAQ,CAACI,GAAT,CAAa;gBAAA,IAAGN,OAAH,SAAGA,OAAH;gBAAA,IAAYO,IAAZ,SAAYA,IAAZ;gBAAA,OAAuB,CAACP,OAAD,EAAUO,IAAV,CAAvB;cAAA,CAAb,CAAD;YAFvB,CADqB,EAKrBN,WALqB,CATlB;;UAAA;YASCY,QATD;YAAA,mBAgBepB,eAAe,CAACoB,QAAD,CAhB9B,2DAgBIJ,OAhBJ;YAAA,kCAiBEC,YAAY,CAACD,OAAD,EAAUP,QAAV,CAjBd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAoBP,SAASQ,YAAT,CAAsBD,OAAtB,EAAyCP,QAAzC,EAA4D;;;EAC1D,IAAMY,KAAK,GAAe,EAA1B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAAQ,CAACC,MAA7B,EAAqCY,CAAC,EAAtC,EAA0C;IACxC,kBAA0Bb,QAAQ,CAACa,CAAD,CAAlC;IAAA,IAAQf,OAAR,eAAQA,OAAR;IAAA,IAAiBO,IAAjB,eAAiBA,IAAjB;IACA,IAAMS,MAAM,GAAGP,OAAO,CAACM,CAAD,CAAtB;IACA,IAAME,eAAe,GAAG,WAAK,CAACjB,OAAD,CAAL,MAAc,IAAd,IAAckB,aAAd,GAAcA,EAAd,GAAkB,EAA1C;IACAD,eAAe,CAACV,IAAD,CAAf,GAAwB;MAAEY,KAAK,EAAEH,MAAT;MAAiBI,OAAO,EAAE;IAA1B,CAAxB;IACAN,KAAK,CAACd,OAAD,CAAL,GAAiBiB,eAAjB;EACD;;EACD,OAAOH,KAAP;AACD","names":["Contract","encodeAggregate","decodeAggregate","ABI","multicall1Factory","fastEncoding","fastEncodingMulticall","multicall","provider","address","blockNumber","requests","length","contract","aggregate","map","data","blockTag","results","decodeResult","call","to","response","state","i","result","stateForAddress","_a","value","success"],"sources":["C:\\Users\\dcmcc\\Desktop\\dan-mccarthy265.github.io\\simple_web3_app\\node_modules\\@usedapp\\core\\src\\providers\\chainState\\common\\multicall.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/providers'\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall'\nimport { RawCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n]\n\n/**\n * @public\n */\nexport const multicall1Factory = (fastEncoding: boolean) => (fastEncoding ? fastEncodingMulticall : multicall)\n\n/**\n * @public\n */\nexport async function multicall(\n  provider: Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const [, results]: [BigNumber, string[]] = await contract.aggregate(\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  return decodeResult(results, requests)\n}\n\n/**\n * @public\n */\nexport async function fastEncodingMulticall(\n  provider: Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const response = await provider.call(\n    {\n      to: address,\n      data: encodeAggregate(requests.map(({ address, data }) => [address, data])),\n    },\n    blockNumber\n  )\n  const [, results] = decodeAggregate(response)\n  return decodeResult(results, requests)\n}\n\nfunction decodeResult(results: string[], requests: RawCall[]) {\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const result = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = { value: result, success: true }\n    state[address] = stateForAddress\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}